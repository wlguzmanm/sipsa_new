package gov.dane.sipsa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FUENTE_ARTICULO_DISTRITO".
*/
public class FuenteArticuloDistritoDao extends AbstractDao<FuenteArticuloDistrito, Long> {

    public static final String TABLENAME = "FUENTE_ARTICULO_DISTRITO";

    /**
     * Properties of entity FuenteArticulo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FutiId = new Property(0, Long.class, "futiId", true, "FUTI_ID");
        public final static Property FuenTelefono = new Property(1, String.class, "fuenTelefono", false, "FUEN_TELEFONO");
        public final static Property FuenDireccion = new Property(2, String.class, "fuenDireccion", false, "FUEN_DIRECCION");
        public final static Property FuenEmail = new Property(3, String.class, "fuenEmail", false, "FUEN_EMAIL");
        public final static Property FuenNombre = new Property(4, String.class, "fuenNombre", false, "FUEN_NOMBRE");
        public final static Property PrreFechaProgramada = new Property(5, java.util.Date.class, "prreFechaProgramada", false, "PRRE_FECHA_PROGRAMADA");
        public final static Property MuniNombre = new Property(6, String.class, "muniNombre", false, "MUNI_NOMBRE");
        public final static Property FuenNombreInformante = new Property(7, String.class, "fuenNombreInformante", false, "FUEN_NOMBRE_INFORMANTE");
        public final static Property TireNombre = new Property(8, String.class, "tireNombre", false, "TIRE_NOMBRE");
        public final static Property MuniId = new Property(9, String.class, "muniId", false, "MUNI_ID");
        public final static Property TireId = new Property(10, Long.class, "tireId", false, "TIRE_ID");
        public final static Property FuenId = new Property(11, Long.class, "fuenId", false, "FUEN_ID");
        public final static Property FuenTelefonoInformante = new Property(12, String.class, "fuenTelefonoInformante", false, "FUEN_TELEFONO_INFORMANTE");
        public final static Property FuenCodigoInterno = new Property(13, String.class, "fuenCodigoInterno", false, "FUEN_CODIGO_INTERNO");
    };

    private Query<FuenteArticuloDistrito> tipoRecoleccion_FuenArtiTipoRecoleccionQuery;
    private Query<FuenteArticuloDistrito> fuente_FuenteQuery;

    public FuenteArticuloDistritoDao(DaoConfig config) {
        super(config);
    }

    public FuenteArticuloDistritoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";

        if(ifNotExists){
            Cursor cursor = db.rawQuery("pragma table_info(FUENTE_ARTICULO_DISTRITO)", null);
            if (cursor != null) {
                if (cursor.getCount() > 0) {
                    Boolean campo1 = false, campo2= false, campo3= false;
                    while (cursor.moveToNext()) {
                        if(cursor.getString(1).equals("FUEN_TELEFONO_INFORMANTE") ){
                            campo1 = true;
                        }
                        if(cursor.getString(1).equals("FUEN_CODIGO_INTERNO") ){
                            campo2 = true;
                        }
                    }
                    if(!campo1)db.execSQL("ALTER TABLE FUENTE_ARTICULO_DISTRITO ADD COLUMN FUEN_TELEFONO_INFORMANTE TEXT");
                    if(!campo2)db.execSQL("ALTER TABLE FUENTE_ARTICULO_DISTRITO ADD COLUMN FUEN_CODIGO_INTERNO TEXT");
                }
                cursor.close();
            }
        }




        db.execSQL("CREATE TABLE " + constraint + "\"FUENTE_ARTICULO_DISTRITO\" (" + //
                "\"FUTI_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: futiId
                "\"FUEN_TELEFONO\" TEXT," + // 1: fuenTelefono
                "\"FUEN_DIRECCION\" TEXT," + // 2: fuenDireccion
                "\"FUEN_EMAIL\" TEXT," + // 3: fuenEmail
                "\"FUEN_NOMBRE\" TEXT," + // 4: fuenNombre
                "\"PRRE_FECHA_PROGRAMADA\" INTEGER," + // 5: prreFechaProgramada
                "\"MUNI_NOMBRE\" TEXT," + // 6: muniNombre
                "\"FUEN_NOMBRE_INFORMANTE\" TEXT," + // 7: fuenNombreInformante
                "\"TIRE_NOMBRE\" TEXT," + // 8: tireNombre
                "\"MUNI_ID\" TEXT," + // 9: muniId
                "\"TIRE_ID\" INTEGER," + // 10: tireId
                "\"FUEN_ID\" INTEGER, " +  // 11: fuenId
                "\"FUEN_TELEFONO_INFORMANTE\" TEXT," + // 12: fuenTelefonoInformante
                "\"FUEN_CODIGO_INTERNO\" TEXT);");// 13: fuenCodigoInterno
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FUENTE_ARTICULO_DISTRITO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FuenteArticuloDistrito entity) {
        stmt.clearBindings();
 
        Long futiId = entity.getFutiId();
        if (futiId != null) {
            stmt.bindLong(1, futiId);
        }
 
        String fuenTelefono = entity.getFuenTelefono();
        if (fuenTelefono != null) {
            stmt.bindString(2, fuenTelefono);
        }
 
        String fuenDireccion = entity.getFuenDireccion();
        if (fuenDireccion != null) {
            stmt.bindString(3, fuenDireccion);
        }
 
        String fuenEmail = entity.getFuenEmail();
        if (fuenEmail != null) {
            stmt.bindString(4, fuenEmail);
        }
 
        String fuenNombre = entity.getFuenNombre();
        if (fuenNombre != null) {
            stmt.bindString(5, fuenNombre);
        }
 
        java.util.Date prreFechaProgramada = entity.getPrreFechaProgramada();
        if (prreFechaProgramada != null) {
            stmt.bindLong(6, prreFechaProgramada.getTime());
        }
 
        String muniNombre = entity.getMuniNombre();
        if (muniNombre != null) {
            stmt.bindString(7, muniNombre);
        }
 
        String fuenNombreInformante = entity.getFuenNombreInformante();
        if (fuenNombreInformante != null) {
            stmt.bindString(8, fuenNombreInformante);
        }
 
        String tireNombre = entity.getTireNombre();
        if (tireNombre != null) {
            stmt.bindString(9, tireNombre);
        }
 
        String muniId = entity.getMuniId();
        if (muniId != null) {
            stmt.bindString(10, muniId);
        }
 
        Long tireId = entity.getTireId();
        if (tireId != null) {
            stmt.bindLong(11, tireId);
        }
 
        Long fuenId = entity.getFuenId();
        if (fuenId != null) {
            stmt.bindLong(12, fuenId);
        }

        String fuenTelefonoInformante = entity.getFuenTelefonoInformante();
        if (fuenTelefonoInformante != null) {
            stmt.bindString(13, fuenTelefonoInformante);
        }

        /*String fuenCodigoInterno = entity.getFuenCodigoInterno();
        if (tireNombre != null) {
            stmt.bindString(14, fuenCodigoInterno);
        }*/

    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FuenteArticuloDistrito readEntity(Cursor cursor, int offset) {
        FuenteArticuloDistrito entity = new FuenteArticuloDistrito( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // futiId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fuenTelefono
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fuenDireccion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fuenEmail
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fuenNombre
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // prreFechaProgramada
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // muniNombre
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fuenNombreInformante
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tireNombre
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // muniId
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // tireId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // fuenId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fuenTelefonoInformante
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // fuenCodigoInterno
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FuenteArticuloDistrito entity, int offset) {
        entity.setFutiId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFuenTelefono(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFuenDireccion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFuenEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFuenNombre(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrreFechaProgramada(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setMuniNombre(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFuenNombreInformante(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTireNombre(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMuniId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTireId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setFuenId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setMuniId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMuniId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FuenteArticuloDistrito entity, long rowId) {
        entity.setFutiId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FuenteArticuloDistrito entity) {
        if(entity != null) {
            return entity.getFutiId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fuenArtiTipoRecoleccion" to-many relationship of TipoRecoleccion. */
    public List<FuenteArticuloDistrito> _queryTipoRecoleccion_FuenArtiTipoRecoleccion(Long tireId) {
        synchronized (this) {
            if (tipoRecoleccion_FuenArtiTipoRecoleccionQuery == null) {
                QueryBuilder<FuenteArticuloDistrito> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TireId.eq(null));
                tipoRecoleccion_FuenArtiTipoRecoleccionQuery = queryBuilder.build();
            }
        }
        Query<FuenteArticuloDistrito> query = tipoRecoleccion_FuenArtiTipoRecoleccionQuery.forCurrentThread();
        query.setParameter(0, tireId);
        return query.list();
    }

    /** Internal query to resolve the "fuente" to-many relationship of Principal. */
    public List<FuenteArticuloDistrito> _queryFuente_Fuente(Long fuenId) {
        synchronized (this) {
            if (fuente_FuenteQuery == null) {
                QueryBuilder<FuenteArticuloDistrito> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FuenId.eq(null));
                fuente_FuenteQuery = queryBuilder.build();
            }
        }
        Query<FuenteArticuloDistrito> query = fuente_FuenteQuery.forCurrentThread();
        query.setParameter(0, fuenId);
        return query.list();
    }

}
