package gov.dane.sipsa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import gov.dane.sipsa.dao.RecoleccionI01;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECOLECCION_I01".
*/
public class RecoleccionI01Dao extends AbstractDao<RecoleccionI01, Long> {

    public static final String TABLENAME = "RECOLECCION_I01";

    /**
     * Properties of entity RecoleccionI01.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FutiId = new Property(1, Long.class, "futiId", false, "FUTI_ID");
        public final static Property ArtiId = new Property(2, Long.class, "artiId", false, "ARTI_ID");
        public final static Property Grin2Id = new Property(3, Long.class, "grin2Id", false, "GRIN2_ID");
        public final static Property InfoId = new Property(4, Long.class, "infoId", false, "INFO_ID");
        public final static Property InfoNombre = new Property(5, String.class, "infoNombre", false, "INFO_NOMBRE");
        public final static Property InfoTelefono = new Property(6, String.class, "infoTelefono", false, "INFO_TELEFONO");
        public final static Property FechaProgramada = new Property(7, java.util.Date.class, "fechaProgramada", false, "FECHA_PROGRAMADA");
        public final static Property PrecioActual = new Property(8, Double.class, "precioActual", false, "PRECIO_ACTUAL");
        public final static Property FechaRecoleccion = new Property(9, java.util.Date.class, "fechaRecoleccion", false, "FECHA_RECOLECCION");
        public final static Property Desviacion = new Property(10, String.class, "desviacion", false, "DESVIACION");
        public final static Property ObservacionId = new Property(11, Long.class, "observacionId", false, "OBSERVACION_ID");
        public final static Property Observaciones = new Property(12, String.class, "observaciones", false, "OBSERVACIONES");
        public final static Property Novedad = new Property(13, String.class, "novedad", false, "NOVEDAD");
        public final static Property PrecioAnterior = new Property(14, Double.class, "precioAnterior", false, "PRECIO_ANTERIOR");
        public final static Property Estado_transmitido = new Property(15, Integer.class, "estado_transmitido", false, "ESTADO_TRANSMITIDO");
    };


    public RecoleccionI01Dao(DaoConfig config) {
        super(config);
    }
    
    public RecoleccionI01Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECOLECCION_I01\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FUTI_ID\" INTEGER," + // 1: futiId
                "\"ARTI_ID\" INTEGER," + // 2: artiId
                "\"GRIN2_ID\" INTEGER," + // 3: grin2Id
                "\"INFO_ID\" INTEGER," + // 4: infoId
                "\"INFO_NOMBRE\" TEXT," + // 5: infoNombre
                "\"INFO_TELEFONO\" TEXT," + // 6: infoTelefono
                "\"FECHA_PROGRAMADA\" INTEGER," + // 7: fechaProgramada
                "\"PRECIO_ACTUAL\" REAL," + // 8: precioActual
                "\"FECHA_RECOLECCION\" INTEGER," + // 9: fechaRecoleccion
                "\"DESVIACION\" TEXT," + // 10: desviacion
                "\"OBSERVACION_ID\" INTEGER," + // 11: observacionId
                "\"OBSERVACIONES\" TEXT," + // 12: observaciones
                "\"NOVEDAD\" TEXT," + // 13: novedad
                "\"PRECIO_ANTERIOR\" REAL," + // 14: precioAnterior
                "\"ESTADO_TRANSMITIDO\" INTEGER);"); // 15: estado_transmitido
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECOLECCION_I01\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecoleccionI01 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long futiId = entity.getFutiId();
        if (futiId != null) {
            stmt.bindLong(2, futiId);
        }
 
        Long artiId = entity.getArtiId();
        if (artiId != null) {
            stmt.bindLong(3, artiId);
        }
 
        Long grin2Id = entity.getGrin2Id();
        if (grin2Id != null) {
            stmt.bindLong(4, grin2Id);
        }
 
        Long infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindLong(5, infoId);
        }
 
        String infoNombre = entity.getInfoNombre();
        if (infoNombre != null) {
            stmt.bindString(6, infoNombre);
        }
 
        String infoTelefono = entity.getInfoTelefono();
        if (infoTelefono != null) {
            stmt.bindString(7, infoTelefono);
        }
 
        java.util.Date fechaProgramada = entity.getFechaProgramada();
        if (fechaProgramada != null) {
            stmt.bindLong(8, fechaProgramada.getTime());
        }
 
        Double precioActual = entity.getPrecioActual();
        if (precioActual != null) {
            stmt.bindDouble(9, precioActual);
        }
 
        java.util.Date fechaRecoleccion = entity.getFechaRecoleccion();
        if (fechaRecoleccion != null) {
            stmt.bindLong(10, fechaRecoleccion.getTime());
        }
 
        String desviacion = entity.getDesviacion();
        if (desviacion != null) {
            stmt.bindString(11, desviacion);
        }
 
        Long observacionId = entity.getObservacionId();
        if (observacionId != null) {
            stmt.bindLong(12, observacionId);
        }
 
        String observaciones = entity.getObservaciones();
        if (observaciones != null) {
            stmt.bindString(13, observaciones);
        }
 
        String novedad = entity.getNovedad();
        if (novedad != null) {
            stmt.bindString(14, novedad);
        }
 
        Double precioAnterior = entity.getPrecioAnterior();
        if (precioAnterior != null) {
            stmt.bindDouble(15, precioAnterior);
        }
 
        Integer estado_transmitido = entity.getEstado_transmitido();
        if (estado_transmitido != null) {
            stmt.bindLong(16, estado_transmitido);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RecoleccionI01 readEntity(Cursor cursor, int offset) {
        RecoleccionI01 entity = new RecoleccionI01( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // futiId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // artiId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // grin2Id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // infoId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // infoNombre
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // infoTelefono
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // fechaProgramada
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // precioActual
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // fechaRecoleccion
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // desviacion
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // observacionId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // observaciones
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // novedad
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // precioAnterior
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15) // estado_transmitido
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecoleccionI01 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFutiId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setArtiId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setGrin2Id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setInfoId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setInfoNombre(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInfoTelefono(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFechaProgramada(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setPrecioActual(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setFechaRecoleccion(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setDesviacion(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setObservacionId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setObservaciones(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNovedad(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPrecioAnterior(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setEstado_transmitido(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RecoleccionI01 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RecoleccionI01 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
