package gov.dane.sipsa.dao;

import java.util.List;
import gov.dane.sipsa.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CASA_COMERCIAL".
 */
public class CasaComercial {

    private Long cacoId;
    private String cacoNombre;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CasaComercialDao myDao;

    private List<Articulo> artiCasaComercial;
    private List<Recoleccion> cacoPrincipal;

    public CasaComercial() {
    }

    public CasaComercial(Long cacoId) {
        this.cacoId = cacoId;
    }

    public CasaComercial(Long cacoId, String cacoNombre) {
        this.cacoId = cacoId;
        this.cacoNombre = cacoNombre;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCasaComercialDao() : null;
    }

    public Long getCacoId() {
        return cacoId;
    }

    public void setCacoId(Long cacoId) {
        this.cacoId = cacoId;
    }

    public String getCacoNombre() {
        return cacoNombre;
    }

    public void setCacoNombre(String cacoNombre) {
        this.cacoNombre = cacoNombre;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Articulo> getArtiCasaComercial() {
        if (artiCasaComercial == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArticuloDao targetDao = daoSession.getArticuloDao();
            List<Articulo> artiCasaComercialNew = targetDao._queryCasaComercial_ArtiCasaComercial(cacoId);
            synchronized (this) {
                if(artiCasaComercial == null) {
                    artiCasaComercial = artiCasaComercialNew;
                }
            }
        }
        return artiCasaComercial;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetArtiCasaComercial() {
        artiCasaComercial = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Recoleccion> getCacoPrincipal() {
        if (cacoPrincipal == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RecoleccionDao targetDao = daoSession.getRecoleccionDao();
            List<Recoleccion> cacoPrincipalNew = targetDao._queryCasaComercial_CacoPrincipal(cacoId);
            synchronized (this) {
                if(cacoPrincipal == null) {
                    cacoPrincipal = cacoPrincipalNew;
                }
            }
        }
        return cacoPrincipal;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCacoPrincipal() {
        cacoPrincipal = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public String toString() {
        return cacoNombre;
    }
}
