package gov.dane.sipsa.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import gov.dane.sipsa.dao.FuenteDao;
import gov.dane.sipsa.dao.UsuarioDao;
import gov.dane.sipsa.dao.ObservacionDao;
import gov.dane.sipsa.dao.RecoleccionInsumoDao;
import gov.dane.sipsa.dao.CasaComercialDao;
import gov.dane.sipsa.dao.ArticuloDao;
import gov.dane.sipsa.dao.InformanteDao;
import gov.dane.sipsa.dao.FuenteArticuloDao;
import gov.dane.sipsa.dao.GrupoDao;
import gov.dane.sipsa.dao.SubGrupoDao;
import gov.dane.sipsa.dao.UnidadMedidaDao;
import gov.dane.sipsa.dao.PresentacionDao;
import gov.dane.sipsa.dao.TipoRecoleccionDao;
import gov.dane.sipsa.dao.RecoleccionDao;
import gov.dane.sipsa.dao.ConfiguracionDao;
import gov.dane.sipsa.dao.PrincipalI01Dao;
import gov.dane.sipsa.dao.RecoleccionI01Dao;
import gov.dane.sipsa.dao.InformadorI01Dao;
import gov.dane.sipsa.dao.FuenteTireI01Dao;
import gov.dane.sipsa.dao.ArticuloI01Dao;
import gov.dane.sipsa.dao.ObservacionI01Dao;
import gov.dane.sipsa.dao.CaracteristicaI01Dao;
import gov.dane.sipsa.dao.ValcarapermitidosI01Dao;
import gov.dane.sipsa.dao.ArtiCaraValoresI01Dao;
import gov.dane.sipsa.dao.EnvioArtiCaraValoresI01Dao;
import gov.dane.sipsa.dao.GrupoInsumoI01Dao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 2): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 3;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        createAllTablesDistrito(db,ifNotExists);
        FuenteDao.createTable(db, ifNotExists);
        UsuarioDao.createTable(db, ifNotExists);
        ObservacionDao.createTable(db, ifNotExists);
        RecoleccionInsumoDao.createTable(db, ifNotExists);
        CasaComercialDao.createTable(db, ifNotExists);
        ArticuloDao.createTable(db, ifNotExists);
        InformanteDao.createTable(db, ifNotExists);
        FuenteArticuloDao.createTable(db, ifNotExists);
        GrupoDao.createTable(db, ifNotExists);
        SubGrupoDao.createTable(db, ifNotExists);
        UnidadMedidaDao.createTable(db, ifNotExists);
        PresentacionDao.createTable(db, ifNotExists);
        TipoRecoleccionDao.createTable(db, ifNotExists);
        RecoleccionDao.createTable(db, ifNotExists);
        RecoleccionDistritoDao.createTable(db, ifNotExists);
        ConfiguracionDao.createTable(db, ifNotExists);
        PrincipalI01Dao.createTable(db, ifNotExists);
        RecoleccionI01Dao.createTable(db, ifNotExists);
        InformadorI01Dao.createTable(db, ifNotExists);
        FuenteTireI01Dao.createTable(db, ifNotExists);
        ArticuloI01Dao.createTable(db, ifNotExists);
        ObservacionI01Dao.createTable(db, ifNotExists);
        CaracteristicaI01Dao.createTable(db, ifNotExists);
        ValcarapermitidosI01Dao.createTable(db, ifNotExists);
        ArtiCaraValoresI01Dao.createTable(db, ifNotExists);
        EnvioArtiCaraValoresI01Dao.createTable(db, ifNotExists);
        GrupoInsumoI01Dao.createTable(db, ifNotExists);
        CaracteristicaDistritoDao.createTable(db, ifNotExists);
    }

    /** Creates underlying database table using DAOs. */
    public static void createAllTablesDistrito(SQLiteDatabase db, boolean ifNotExists) {

        FuenteDistritoDao.createTable(db, ifNotExists);
        ObservacionDistritoDao.createTable(db, ifNotExists);
        ArticuloDistritoDao.createTable(db, ifNotExists);
        FuenteArticuloDistritoDao.createTable(db, ifNotExists);
        RecoleccionDistritoDao.createTable(db, ifNotExists);
        CaracteristicaDistritoDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        FuenteDao.dropTable(db, ifExists);
        //UsuarioDao.dropTable(db, ifExists);
        ObservacionDao.dropTable(db, ifExists);
        RecoleccionInsumoDao.dropTable(db, ifExists);
        CasaComercialDao.dropTable(db, ifExists);
        ArticuloDao.dropTable(db, ifExists);
        InformanteDao.dropTable(db, ifExists);
        FuenteArticuloDao.dropTable(db, ifExists);
        GrupoDao.dropTable(db, ifExists);
        SubGrupoDao.dropTable(db, ifExists);
        UnidadMedidaDao.dropTable(db, ifExists);
        PresentacionDao.dropTable(db, ifExists);
        TipoRecoleccionDao.dropTable(db, ifExists);
        RecoleccionDao.dropTable(db, ifExists);
        RecoleccionDistritoDao.dropTable(db, ifExists);
        ConfiguracionDao.dropTable(db, ifExists);
        PrincipalI01Dao.dropTable(db, ifExists);
        RecoleccionI01Dao.dropTable(db, ifExists);
        InformadorI01Dao.dropTable(db, ifExists);
        FuenteTireI01Dao.dropTable(db, ifExists);
        ArticuloI01Dao.dropTable(db, ifExists);
        ObservacionI01Dao.dropTable(db, ifExists);
        CaracteristicaI01Dao.dropTable(db, ifExists);
        ValcarapermitidosI01Dao.dropTable(db, ifExists);
        ArtiCaraValoresI01Dao.dropTable(db, ifExists);
        EnvioArtiCaraValoresI01Dao.dropTable(db, ifExists);
        GrupoInsumoI01Dao.dropTable(db, ifExists);
        CaracteristicaDistritoDao.dropTable(db, ifExists);
    }

    public static void dropAllTablesDistrito(SQLiteDatabase db, boolean ifExists) {
        FuenteDistritoDao.dropTable(db, ifExists);
        //UsuarioDao.dropTable(db, ifExists);
        ObservacionDistritoDao.dropTable(db, ifExists);   //----hacerlo con pbservacion
        ArticuloDistritoDao.dropTable(db, ifExists);
        FuenteArticuloDistritoDao.dropTable(db, ifExists);
        RecoleccionDistritoDao.dropTable(db, ifExists);
        CaracteristicaDistritoDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(FuenteDao.class);
        registerDaoClass(FuenteDistritoDao.class);
        registerDaoClass(UsuarioDao.class);
        registerDaoClass(ObservacionDao.class);
        registerDaoClass(ObservacionDistritoDao.class);
        registerDaoClass(RecoleccionInsumoDao.class);
        registerDaoClass(CasaComercialDao.class);
        registerDaoClass(ArticuloDao.class);
        registerDaoClass(ArticuloDistritoDao.class);
        registerDaoClass(InformanteDao.class);
        registerDaoClass(FuenteArticuloDao.class);
        registerDaoClass(FuenteArticuloDistritoDao.class);
        registerDaoClass(GrupoDao.class);
        registerDaoClass(SubGrupoDao.class);
        registerDaoClass(UnidadMedidaDao.class);
        registerDaoClass(PresentacionDao.class);
        registerDaoClass(TipoRecoleccionDao.class);
        registerDaoClass(RecoleccionDao.class);
        registerDaoClass(RecoleccionDistritoDao.class);
        registerDaoClass(ConfiguracionDao.class);
        registerDaoClass(PrincipalI01Dao.class);
        registerDaoClass(RecoleccionI01Dao.class);
        registerDaoClass(InformadorI01Dao.class);
        registerDaoClass(FuenteTireI01Dao.class);
        registerDaoClass(ArticuloI01Dao.class);
        registerDaoClass(ObservacionI01Dao.class);
        registerDaoClass(CaracteristicaI01Dao.class);
        registerDaoClass(ValcarapermitidosI01Dao.class);
        registerDaoClass(ArtiCaraValoresI01Dao.class);
        registerDaoClass(EnvioArtiCaraValoresI01Dao.class);
        registerDaoClass(GrupoInsumoI01Dao.class);
        registerDaoClass(CaracteristicaDistritoDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
