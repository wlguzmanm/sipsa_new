package gov.dane.sipsa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import gov.dane.sipsa.dao.CasaComercial;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CASA_COMERCIAL".
*/
public class CasaComercialDao extends AbstractDao<CasaComercial, Long> {

    public static final String TABLENAME = "CASA_COMERCIAL";

    /**
     * Properties of entity CasaComercial.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CacoId = new Property(0, Long.class, "cacoId", true, "CACO_ID");
        public final static Property CacoNombre = new Property(1, String.class, "cacoNombre", false, "CACO_NOMBRE");
    };

    private DaoSession daoSession;


    public CasaComercialDao(DaoConfig config) {
        super(config);
    }
    
    public CasaComercialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CASA_COMERCIAL\" (" + //
                "\"CACO_ID\" INTEGER PRIMARY KEY ," + // 0: cacoId
                "\"CACO_NOMBRE\" TEXT);"); // 1: cacoNombre
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CASA_COMERCIAL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CasaComercial entity) {
        stmt.clearBindings();
 
        Long cacoId = entity.getCacoId();
        if (cacoId != null) {
            stmt.bindLong(1, cacoId);
        }
 
        String cacoNombre = entity.getCacoNombre();
        if (cacoNombre != null) {
            stmt.bindString(2, cacoNombre);
        }
    }

    @Override
    protected void attachEntity(CasaComercial entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CasaComercial readEntity(Cursor cursor, int offset) {
        CasaComercial entity = new CasaComercial( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cacoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // cacoNombre
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CasaComercial entity, int offset) {
        entity.setCacoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCacoNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CasaComercial entity, long rowId) {
        entity.setCacoId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CasaComercial entity) {
        if(entity != null) {
            return entity.getCacoId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
