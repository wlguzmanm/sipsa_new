package gov.dane.sipsa.dao;

import gov.dane.sipsa.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "SUB_GRUPO".
 */
public class SubGrupo {

    private Long idSubGrupo;
    private String nombre;
    private java.util.Date fechaCreacion;
    private String usuarioCreacion;
    private java.util.Date fechaModificacion;
    private String usuarioModificacion;
    private long idGrupo;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SubGrupoDao myDao;

    private Grupo grupoSubGrupo;
    private Long grupoSubGrupo__resolvedKey;


    public SubGrupo() {
    }

    public SubGrupo(Long idSubGrupo) {
        this.idSubGrupo = idSubGrupo;
    }

    public SubGrupo(Long idSubGrupo, String nombre, java.util.Date fechaCreacion, String usuarioCreacion, java.util.Date fechaModificacion, String usuarioModificacion, long idGrupo) {
        this.idSubGrupo = idSubGrupo;
        this.nombre = nombre;
        this.fechaCreacion = fechaCreacion;
        this.usuarioCreacion = usuarioCreacion;
        this.fechaModificacion = fechaModificacion;
        this.usuarioModificacion = usuarioModificacion;
        this.idGrupo = idGrupo;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSubGrupoDao() : null;
    }

    public Long getIdSubGrupo() {
        return idSubGrupo;
    }

    public void setIdSubGrupo(Long idSubGrupo) {
        this.idSubGrupo = idSubGrupo;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public java.util.Date getFechaCreacion() {
        return fechaCreacion;
    }

    public void setFechaCreacion(java.util.Date fechaCreacion) {
        this.fechaCreacion = fechaCreacion;
    }

    public String getUsuarioCreacion() {
        return usuarioCreacion;
    }

    public void setUsuarioCreacion(String usuarioCreacion) {
        this.usuarioCreacion = usuarioCreacion;
    }

    public java.util.Date getFechaModificacion() {
        return fechaModificacion;
    }

    public void setFechaModificacion(java.util.Date fechaModificacion) {
        this.fechaModificacion = fechaModificacion;
    }

    public String getUsuarioModificacion() {
        return usuarioModificacion;
    }

    public void setUsuarioModificacion(String usuarioModificacion) {
        this.usuarioModificacion = usuarioModificacion;
    }

    public long getIdGrupo() {
        return idGrupo;
    }

    public void setIdGrupo(long idGrupo) {
        this.idGrupo = idGrupo;
    }

    /** To-one relationship, resolved on first access. */
    public Grupo getGrupoSubGrupo() {
        long __key = this.idGrupo;
        if (grupoSubGrupo__resolvedKey == null || !grupoSubGrupo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GrupoDao targetDao = daoSession.getGrupoDao();
            Grupo grupoSubGrupoNew = targetDao.load(__key);
            synchronized (this) {
                grupoSubGrupo = grupoSubGrupoNew;
            	grupoSubGrupo__resolvedKey = __key;
            }
        }
        return grupoSubGrupo;
    }

    public void setGrupoSubGrupo(Grupo grupoSubGrupo) {
        if (grupoSubGrupo == null) {
            throw new DaoException("To-one property 'idGrupo' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.grupoSubGrupo = grupoSubGrupo;
            idGrupo = grupoSubGrupo.getGrupId();
            grupoSubGrupo__resolvedKey = idGrupo;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
