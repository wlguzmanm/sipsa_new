package gov.dane.sipsa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import gov.dane.sipsa.dao.InformadorI01;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INFORMADOR_I01".
*/
public class InformadorI01Dao extends AbstractDao<InformadorI01, Long> {

    public static final String TABLENAME = "INFORMADOR_I01";

    /**
     * Properties of entity InformadorI01.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InfoId = new Property(0, Long.class, "infoId", true, "INFO_ID");
        public final static Property MuniId = new Property(1, String.class, "muniId", false, "MUNI_ID");
        public final static Property InfoNombre = new Property(2, String.class, "infoNombre", false, "INFO_NOMBRE");
        public final static Property InfoTelefono = new Property(3, String.class, "infoTelefono", false, "INFO_TELEFONO");
    };


    public InformadorI01Dao(DaoConfig config) {
        super(config);
    }
    
    public InformadorI01Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INFORMADOR_I01\" (" + //
                "\"INFO_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: infoId
                "\"MUNI_ID\" TEXT," + // 1: muniId
                "\"INFO_NOMBRE\" TEXT," + // 2: infoNombre
                "\"INFO_TELEFONO\" TEXT);"); // 3: infoTelefono
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INFORMADOR_I01\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, InformadorI01 entity) {
        stmt.clearBindings();
 
        Long infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindLong(1, infoId);
        }
 
        String muniId = entity.getMuniId();
        if (muniId != null) {
            stmt.bindString(2, muniId);
        }
 
        String infoNombre = entity.getInfoNombre();
        if (infoNombre != null) {
            stmt.bindString(3, infoNombre);
        }
 
        String infoTelefono = entity.getInfoTelefono();
        if (infoTelefono != null) {
            stmt.bindString(4, infoTelefono);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public InformadorI01 readEntity(Cursor cursor, int offset) {
        InformadorI01 entity = new InformadorI01( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // infoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // muniId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // infoNombre
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // infoTelefono
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, InformadorI01 entity, int offset) {
        entity.setInfoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMuniId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInfoNombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInfoTelefono(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(InformadorI01 entity, long rowId) {
        entity.setInfoId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(InformadorI01 entity) {
        if(entity != null) {
            return entity.getInfoId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
