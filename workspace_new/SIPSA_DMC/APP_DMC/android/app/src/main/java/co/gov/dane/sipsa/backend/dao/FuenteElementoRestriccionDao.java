package co.gov.dane.sipsa.backend.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FUENTE_ELEMENTO_RESTRICCION".
*/
public class FuenteElementoRestriccionDao extends AbstractDao<FuenteElementoRestriccion, Long> {

    public static final String TABLENAME = "FUENTE_ELEMENTO_RESTRICCION";

    /**
     * Properties of entity FuenteElementoRestriccion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IdFunteElemento = new Property(0, Long.class, "idFunteElemento", true, "ID_FUNTE_ELEMENTO");
        public final static Property IdFuente = new Property(1, Integer.class, "idFuente", false, "ID_FUENTE");
        public final static Property IdElemento = new Property(2, Integer.class, "idElemento", false, "ID_ELEMENTO");
        public final static Property NombreElemento = new Property(3, String.class, "nombreElemento", false, "NOMBRE_ELEMENTO");
    };


    public FuenteElementoRestriccionDao(DaoConfig config) {
        super(config);
    }
    
    public FuenteElementoRestriccionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FUENTE_ELEMENTO_RESTRICCION\" (" + //
                "\"ID_FUNTE_ELEMENTO\" INTEGER PRIMARY KEY ," + // 0: idFunteElemento
                "\"ID_FUENTE\" INTEGER," + // 1: idFuente
                "\"ID_ELEMENTO\" INTEGER," + // 2: idElemento
                "\"NOMBRE_ELEMENTO\" TEXT);"); // 3: nombreElemento
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FUENTE_ELEMENTO_RESTRICCION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FuenteElementoRestriccion entity) {
        stmt.clearBindings();
 
        Long idFunteElemento = entity.getIdFunteElemento();
        if (idFunteElemento != null) {
            stmt.bindLong(1, idFunteElemento);
        }
 
        Integer idFuente = entity.getIdFuente();
        if (idFuente != null) {
            stmt.bindLong(2, idFuente);
        }
 
        Integer idElemento = entity.getIdElemento();
        if (idElemento != null) {
            stmt.bindLong(3, idElemento);
        }
 
        String nombreElemento = entity.getNombreElemento();
        if (nombreElemento != null) {
            stmt.bindString(4, nombreElemento);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FuenteElementoRestriccion readEntity(Cursor cursor, int offset) {
        FuenteElementoRestriccion entity = new FuenteElementoRestriccion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idFunteElemento
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idFuente
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // idElemento
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // nombreElemento
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FuenteElementoRestriccion entity, int offset) {
        entity.setIdFunteElemento(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdFuente(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIdElemento(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNombreElemento(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FuenteElementoRestriccion entity, long rowId) {
        entity.setIdFunteElemento(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FuenteElementoRestriccion entity) {
        if(entity != null) {
            return entity.getIdFunteElemento();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
