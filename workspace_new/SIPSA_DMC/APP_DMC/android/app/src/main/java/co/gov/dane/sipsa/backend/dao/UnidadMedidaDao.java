package co.gov.dane.sipsa.backend.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "UNIDAD_MEDIDA".
*/
public class UnidadMedidaDao extends AbstractDao<UnidadMedida, Long> {

    public static final String TABLENAME = "UNIDAD_MEDIDA";

    /**
     * Properties of entity UnidadMedida.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "ID");
        public final static Property UnmeId = new Property(1, Long.class, "unmeId", false, "UNME_ID");
        public final static Property UnmeCantidadPpal = new Property(2, Double.class, "unmeCantidadPpal", false, "UNME_CANTIDAD_PPAL");
        public final static Property UnmeCantidad2 = new Property(3, Double.class, "unmeCantidad2", false, "UNME_CANTIDAD2");
        public final static Property UnmeNombrePpal = new Property(4, String.class, "unmeNombrePpal", false, "UNME_NOMBRE_PPAL");
        public final static Property UnmeNombre2 = new Property(5, String.class, "unmeNombre2", false, "UNME_NOMBRE2");
        public final static Property TireNombre = new Property(6, String.class, "tireNombre", false, "TIRE_NOMBRE");
        public final static Property TiprId = new Property(7, Long.class, "tiprId", false, "TIPR_ID");
        public final static Property TiprNombre = new Property(8, String.class, "tiprNombre", false, "TIPR_NOMBRE");
        public final static Property IdPresentacion = new Property(9, long.class, "idPresentacion", false, "ID_PRESENTACION");
        public final static Property TireId = new Property(10, Long.class, "tireId", false, "TIRE_ID");
    };

    private DaoSession daoSession;

    private Query<UnidadMedida> tipoRecoleccion_UnmeTipoRecoleccionQuery;

    public UnidadMedidaDao(DaoConfig config) {
        super(config);
    }
    
    public UnidadMedidaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UNIDAD_MEDIDA\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"UNME_ID\" INTEGER," + // 1: unmeId
                "\"UNME_CANTIDAD_PPAL\" REAL," + // 2: unmeCantidadPpal
                "\"UNME_CANTIDAD2\" REAL," + // 3: unmeCantidad2
                "\"UNME_NOMBRE_PPAL\" TEXT," + // 4: unmeNombrePpal
                "\"UNME_NOMBRE2\" TEXT," + // 5: unmeNombre2
                "\"TIRE_NOMBRE\" TEXT," + // 6: tireNombre
                "\"TIPR_ID\" INTEGER," + // 7: tiprId
                "\"TIPR_NOMBRE\" TEXT," + // 8: tiprNombre
                "\"ID_PRESENTACION\" INTEGER NOT NULL ," + // 9: idPresentacion
                "\"TIRE_ID\" INTEGER);"); // 10: tireId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UNIDAD_MEDIDA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UnidadMedida entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        Long unmeId = entity.getUnmeId();
        if (unmeId != null) {
            stmt.bindLong(2, unmeId);
        }
 
        Double unmeCantidadPpal = entity.getUnmeCantidadPpal();
        if (unmeCantidadPpal != null) {
            stmt.bindDouble(3, unmeCantidadPpal);
        }
 
        Double unmeCantidad2 = entity.getUnmeCantidad2();
        if (unmeCantidad2 != null) {
            stmt.bindDouble(4, unmeCantidad2);
        }
 
        String unmeNombrePpal = entity.getUnmeNombrePpal();
        if (unmeNombrePpal != null) {
            stmt.bindString(5, unmeNombrePpal);
        }
 
        String unmeNombre2 = entity.getUnmeNombre2();
        if (unmeNombre2 != null) {
            stmt.bindString(6, unmeNombre2);
        }
 
        String tireNombre = entity.getTireNombre();
        if (tireNombre != null) {
            stmt.bindString(7, tireNombre);
        }
 
        Long tiprId = entity.getTiprId();
        if (tiprId != null) {
            stmt.bindLong(8, tiprId);
        }
 
        String tiprNombre = entity.getTiprNombre();
        if (tiprNombre != null) {
            stmt.bindString(9, tiprNombre);
        }
        stmt.bindLong(10, entity.getIdPresentacion());
 
        Long tireId = entity.getTireId();
        if (tireId != null) {
            stmt.bindLong(11, tireId);
        }
    }

    @Override
    protected void attachEntity(UnidadMedida entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UnidadMedida readEntity(Cursor cursor, int offset) {
        UnidadMedida entity = new UnidadMedida( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // unmeId
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // unmeCantidadPpal
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // unmeCantidad2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // unmeNombrePpal
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unmeNombre2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tireNombre
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // tiprId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tiprNombre
            cursor.getLong(offset + 9), // idPresentacion
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // tireId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UnidadMedida entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnmeId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUnmeCantidadPpal(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setUnmeCantidad2(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setUnmeNombrePpal(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnmeNombre2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTireNombre(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTiprId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setTiprNombre(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIdPresentacion(cursor.getLong(offset + 9));
        entity.setTireId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UnidadMedida entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UnidadMedida entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "unmeTipoRecoleccion" to-many relationship of TipoRecoleccion. */
    public List<UnidadMedida> _queryTipoRecoleccion_UnmeTipoRecoleccion(Long tireId) {
        synchronized (this) {
            if (tipoRecoleccion_UnmeTipoRecoleccionQuery == null) {
                QueryBuilder<UnidadMedida> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TireId.eq(null));
                tipoRecoleccion_UnmeTipoRecoleccionQuery = queryBuilder.build();
            }
        }
        Query<UnidadMedida> query = tipoRecoleccion_UnmeTipoRecoleccionQuery.forCurrentThread();
        query.setParameter(0, tireId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPresentacionDao().getAllColumns());
            builder.append(" FROM UNIDAD_MEDIDA T");
            builder.append(" LEFT JOIN PRESENTACION T0 ON T.\"ID_PRESENTACION\"=T0.\"IDPRESENTACION\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected UnidadMedida loadCurrentDeep(Cursor cursor, boolean lock) {
        UnidadMedida entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Presentacion presentacionUnidad = loadCurrentOther(daoSession.getPresentacionDao(), cursor, offset);
         if(presentacionUnidad != null) {
            entity.setPresentacionUnidad(presentacionUnidad);
        }

        return entity;    
    }

    public UnidadMedida loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<UnidadMedida> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<UnidadMedida> list = new ArrayList<UnidadMedida>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<UnidadMedida> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<UnidadMedida> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
