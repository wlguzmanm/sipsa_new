package co.gov.dane.sipsa.backend.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "UNIDAD_MEDIDA".
 */
public class UnidadMedida {

    private Long Id;
    private Long unmeId;
    private Double unmeCantidadPpal;
    private Double unmeCantidad2;
    private String unmeNombrePpal;
    private String unmeNombre2;
    private String tireNombre;
    private Long tiprId;
    private String tiprNombre;
    private long idPresentacion;
    private Long tireId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UnidadMedidaDao myDao;

    private Presentacion presentacionUnidad;
    private Long presentacionUnidad__resolvedKey;

    private List<Recoleccion> unmePrincipal;

    public UnidadMedida() {
    }

    public UnidadMedida(Long Id) {
        this.Id = Id;
    }

    public UnidadMedida(Long Id, Long unmeId, Double unmeCantidadPpal, Double unmeCantidad2, String unmeNombrePpal, String unmeNombre2, String tireNombre, Long tiprId, String tiprNombre, long idPresentacion, Long tireId) {
        this.Id = Id;
        this.unmeId = unmeId;
        this.unmeCantidadPpal = unmeCantidadPpal;
        this.unmeCantidad2 = unmeCantidad2;
        this.unmeNombrePpal = unmeNombrePpal;
        this.unmeNombre2 = unmeNombre2;
        this.tireNombre = tireNombre;
        this.tiprId = tiprId;
        this.tiprNombre = tiprNombre;
        this.idPresentacion = idPresentacion;
        this.tireId = tireId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUnidadMedidaDao() : null;
    }

    public Long getId() {
        return Id;
    }

    public void setId(Long Id) {
        this.Id = Id;
    }

    public Long getUnmeId() {
        return unmeId;
    }

    public void setUnmeId(Long unmeId) {
        this.unmeId = unmeId;
    }

    public Double getUnmeCantidadPpal() {
        return unmeCantidadPpal;
    }

    public void setUnmeCantidadPpal(Double unmeCantidadPpal) {
        this.unmeCantidadPpal = unmeCantidadPpal;
    }

    public Double getUnmeCantidad2() {
        return unmeCantidad2;
    }

    public void setUnmeCantidad2(Double unmeCantidad2) {
        this.unmeCantidad2 = unmeCantidad2;
    }

    public String getUnmeNombrePpal() {
        return unmeNombrePpal;
    }

    public void setUnmeNombrePpal(String unmeNombrePpal) {
        this.unmeNombrePpal = unmeNombrePpal;
    }

    public String getUnmeNombre2() {
        return unmeNombre2;
    }

    public void setUnmeNombre2(String unmeNombre2) {
        this.unmeNombre2 = unmeNombre2;
    }

    public String getTireNombre() {
        return tireNombre;
    }

    public void setTireNombre(String tireNombre) {
        this.tireNombre = tireNombre;
    }

    public Long getTiprId() {
        return tiprId;
    }

    public void setTiprId(Long tiprId) {
        this.tiprId = tiprId;
    }

    public String getTiprNombre() {
        return tiprNombre;
    }

    public void setTiprNombre(String tiprNombre) {
        this.tiprNombre = tiprNombre;
    }

    public long getIdPresentacion() {
        return idPresentacion;
    }

    public void setIdPresentacion(long idPresentacion) {
        this.idPresentacion = idPresentacion;
    }

    public Long getTireId() {
        return tireId;
    }

    public void setTireId(Long tireId) {
        this.tireId = tireId;
    }

    /** To-one relationship, resolved on first access. */
    public Presentacion getPresentacionUnidad() {
        long __key = this.idPresentacion;
        if (presentacionUnidad__resolvedKey == null || !presentacionUnidad__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PresentacionDao targetDao = daoSession.getPresentacionDao();
            Presentacion presentacionUnidadNew = targetDao.load(__key);
            synchronized (this) {
                presentacionUnidad = presentacionUnidadNew;
            	presentacionUnidad__resolvedKey = __key;
            }
        }
        return presentacionUnidad;
    }

    public void setPresentacionUnidad(Presentacion presentacionUnidad) {
        if (presentacionUnidad == null) {
            throw new DaoException("To-one property 'idPresentacion' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.presentacionUnidad = presentacionUnidad;
            idPresentacion = presentacionUnidad.getIdpresentacion();
            presentacionUnidad__resolvedKey = idPresentacion;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Recoleccion> getUnmePrincipal() {
        if (unmePrincipal == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RecoleccionDao targetDao = daoSession.getRecoleccionDao();
            List<Recoleccion> unmePrincipalNew = targetDao._queryUnidadMedida_UnmePrincipal(Id);
            synchronized (this) {
                if(unmePrincipal == null) {
                    unmePrincipal = unmePrincipalNew;
                }
            }
        }
        return unmePrincipal;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUnmePrincipal() {
        unmePrincipal = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public String toString() {
        return unmeCantidadPpal +" "+ unmeNombrePpal ;
    }


}
