package co.gov.dane.sipsa.backend.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "RECOLECCION".
*/
public class RecoleccionDao extends AbstractDao<Recoleccion, Long> {

    public static final String TABLENAME = "RECOLECCION";

    /**
     * Properties of entity Recoleccion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ArtiVlrMinDiasm = new Property(1, Long.class, "artiVlrMinDiasm", false, "ARTI_VLR_MIN_DIASM");
        public final static Property FutiId = new Property(2, Long.class, "futiId", false, "FUTI_ID");
        public final static Property NovedadAnterior = new Property(3, String.class, "novedadAnterior", false, "NOVEDAD_ANTERIOR");
        public final static Property ArticacoId = new Property(4, Long.class, "articacoId", false, "ARTICACO_ID");
        public final static Property SubgNombre = new Property(5, String.class, "subgNombre", false, "SUBG_NOMBRE");
        public final static Property UnmeNombre2 = new Property(6, String.class, "unmeNombre2", false, "UNME_NOMBRE2");
        public final static Property CacoNombre = new Property(7, String.class, "cacoNombre", false, "CACO_NOMBRE");
        public final static Property FuenNombre = new Property(8, String.class, "fuenNombre", false, "FUEN_NOMBRE");
        public final static Property ArticacoRegicaLinea = new Property(9, String.class, "articacoRegicaLinea", false, "ARTICACO_REGICA_LINEA");
        public final static Property TiprId = new Property(10, Long.class, "tiprId", false, "TIPR_ID");
        public final static Property ArtiNombre = new Property(11, String.class, "artiNombre", false, "ARTI_NOMBRE");
        public final static Property ArtiVlrMaxTomas = new Property(12, Long.class, "artiVlrMaxTomas", false, "ARTI_VLR_MAX_TOMAS");
        public final static Property TiprNombre = new Property(13, String.class, "tiprNombre", false, "TIPR_NOMBRE");
        public final static Property UnmeNombrePpal = new Property(14, String.class, "unmeNombrePpal", false, "UNME_NOMBRE_PPAL");
        public final static Property ArtiVlrMinRondas = new Property(15, Long.class, "artiVlrMinRondas", false, "ARTI_VLR_MIN_RONDAS");
        public final static Property PromAntDiario = new Property(16, Double.class, "promAntDiario", false, "PROM_ANT_DIARIO");
        public final static Property ArtiVlrMinTomas = new Property(17, Long.class, "artiVlrMinTomas", false, "ARTI_VLR_MIN_TOMAS");
        public final static Property ArtiVlrMaxRondas = new Property(18, Long.class, "artiVlrMaxRondas", false, "ARTI_VLR_MAX_RONDAS");
        public final static Property PrreFechaProgramada = new Property(19, java.util.Date.class, "prreFechaProgramada", false, "PRRE_FECHA_PROGRAMADA");
        public final static Property MuniId = new Property(20, String.class, "muniId", false, "MUNI_ID");
        public final static Property UnmeCantidad2 = new Property(21, Long.class, "unmeCantidad2", false, "UNME_CANTIDAD2");
        public final static Property GrupNombre = new Property(22, String.class, "grupNombre", false, "GRUP_NOMBRE");
        public final static Property UnmeCantidadPpal = new Property(23, Long.class, "unmeCantidadPpal", false, "UNME_CANTIDAD_PPAL");
        public final static Property ArtiVlrMaxDiasm = new Property(24, Long.class, "artiVlrMaxDiasm", false, "ARTI_VLR_MAX_DIASM");
        public final static Property Precio = new Property(25, Double.class, "precio", false, "PRECIO");
        public final static Property Novedad = new Property(26, String.class, "novedad", false, "NOVEDAD");
        public final static Property Tipo = new Property(27, String.class, "tipo", false, "TIPO");
        public final static Property FechaDescarga = new Property(28, java.util.Date.class, "fechaDescarga", false, "FECHA_DESCARGA");
        public final static Property Observacion = new Property(29, String.class, "observacion", false, "OBSERVACION");
        public final static Property IdObservacion = new Property(30, Long.class, "idObservacion", false, "ID_OBSERVACION");
        public final static Property Desviacion = new Property(31, String.class, "desviacion", false, "DESVIACION");
        public final static Property EstadoRecoleccion = new Property(32, Boolean.class, "estadoRecoleccion", false, "ESTADO_RECOLECCION");
        public final static Property Transmitido = new Property(33, Boolean.class, "transmitido", false, "TRANSMITIDO");
        public final static Property FechaRecoleccion = new Property(34, java.util.Date.class, "fechaRecoleccion", false, "FECHA_RECOLECCION");
        public final static Property UnmeId = new Property(35, Long.class, "unmeId", false, "UNME_ID");
        public final static Property TireId = new Property(36, Long.class, "tireId", false, "TIRE_ID");
        public final static Property FuenId = new Property(37, Long.class, "fuenId", false, "FUEN_ID");
        public final static Property ArtiId = new Property(38, Long.class, "artiId", false, "ARTI_ID");
        public final static Property CacoId = new Property(39, Long.class, "cacoId", false, "CACO_ID");
    };

    private Query<Recoleccion> unidadMedida_UnmePrincipalQuery;
    private Query<Recoleccion> tipoRecoleccion_TirePrincipalQuery;
    private Query<Recoleccion> fuente_FuenPrincipalQuery;
    private Query<Recoleccion> articulo_ArtiPrincipalQuery;
    private Query<Recoleccion> casaComercial_CacoPrincipalQuery;

    public RecoleccionDao(DaoConfig config) {
        super(config);
    }
    
    public RecoleccionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECOLECCION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ARTI_VLR_MIN_DIASM\" INTEGER," + // 1: artiVlrMinDiasm
                "\"FUTI_ID\" INTEGER," + // 2: futiId
                "\"NOVEDAD_ANTERIOR\" TEXT," + // 3: novedadAnterior
                "\"ARTICACO_ID\" INTEGER," + // 4: articacoId
                "\"SUBG_NOMBRE\" TEXT," + // 5: subgNombre
                "\"UNME_NOMBRE2\" TEXT," + // 6: unmeNombre2
                "\"CACO_NOMBRE\" TEXT," + // 7: cacoNombre
                "\"FUEN_NOMBRE\" TEXT," + // 8: fuenNombre
                "\"ARTICACO_REGICA_LINEA\" TEXT," + // 9: articacoRegicaLinea
                "\"TIPR_ID\" INTEGER," + // 10: tiprId
                "\"ARTI_NOMBRE\" TEXT," + // 11: artiNombre
                "\"ARTI_VLR_MAX_TOMAS\" INTEGER," + // 12: artiVlrMaxTomas
                "\"TIPR_NOMBRE\" TEXT," + // 13: tiprNombre
                "\"UNME_NOMBRE_PPAL\" TEXT," + // 14: unmeNombrePpal
                "\"ARTI_VLR_MIN_RONDAS\" INTEGER," + // 15: artiVlrMinRondas
                "\"PROM_ANT_DIARIO\" REAL," + // 16: promAntDiario
                "\"ARTI_VLR_MIN_TOMAS\" INTEGER," + // 17: artiVlrMinTomas
                "\"ARTI_VLR_MAX_RONDAS\" INTEGER," + // 18: artiVlrMaxRondas
                "\"PRRE_FECHA_PROGRAMADA\" INTEGER," + // 19: prreFechaProgramada
                "\"MUNI_ID\" TEXT," + // 20: muniId
                "\"UNME_CANTIDAD2\" INTEGER," + // 21: unmeCantidad2
                "\"GRUP_NOMBRE\" TEXT," + // 22: grupNombre
                "\"UNME_CANTIDAD_PPAL\" INTEGER," + // 23: unmeCantidadPpal
                "\"ARTI_VLR_MAX_DIASM\" INTEGER," + // 24: artiVlrMaxDiasm
                "\"PRECIO\" REAL," + // 25: precio
                "\"NOVEDAD\" TEXT," + // 26: novedad
                "\"TIPO\" TEXT," + // 27: tipo
                "\"FECHA_DESCARGA\" INTEGER," + // 28: fechaDescarga
                "\"OBSERVACION\" TEXT," + // 29: observacion
                "\"ID_OBSERVACION\" INTEGER," + // 30: idObservacion
                "\"DESVIACION\" TEXT," + // 31: desviacion
                "\"ESTADO_RECOLECCION\" INTEGER," + // 32: estadoRecoleccion
                "\"TRANSMITIDO\" INTEGER," + // 33: transmitido
                "\"FECHA_RECOLECCION\" INTEGER," + // 34: fechaRecoleccion
                "\"UNME_ID\" INTEGER," + // 35: unmeId
                "\"TIRE_ID\" INTEGER," + // 36: tireId
                "\"FUEN_ID\" INTEGER," + // 37: fuenId
                "\"ARTI_ID\" INTEGER," + // 38: artiId
                "\"CACO_ID\" INTEGER);"); // 39: cacoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECOLECCION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Recoleccion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long artiVlrMinDiasm = entity.getArtiVlrMinDiasm();
        if (artiVlrMinDiasm != null) {
            stmt.bindLong(2, artiVlrMinDiasm);
        }
 
        Long futiId = entity.getFutiId();
        if (futiId != null) {
            stmt.bindLong(3, futiId);
        }
 
        String novedadAnterior = entity.getNovedadAnterior();
        if (novedadAnterior != null) {
            stmt.bindString(4, novedadAnterior);
        }
 
        Long articacoId = entity.getArticacoId();
        if (articacoId != null) {
            stmt.bindLong(5, articacoId);
        }
 
        String subgNombre = entity.getSubgNombre();
        if (subgNombre != null) {
            stmt.bindString(6, subgNombre);
        }
 
        String unmeNombre2 = entity.getUnmeNombre2();
        if (unmeNombre2 != null) {
            stmt.bindString(7, unmeNombre2);
        }
 
        String cacoNombre = entity.getCacoNombre();
        if (cacoNombre != null) {
            stmt.bindString(8, cacoNombre);
        }
 
        String fuenNombre = entity.getFuenNombre();
        if (fuenNombre != null) {
            stmt.bindString(9, fuenNombre);
        }
 
        String articacoRegicaLinea = entity.getArticacoRegicaLinea();
        if (articacoRegicaLinea != null) {
            stmt.bindString(10, articacoRegicaLinea);
        }
 
        Long tiprId = entity.getTiprId();
        if (tiprId != null) {
            stmt.bindLong(11, tiprId);
        }
 
        String artiNombre = entity.getArtiNombre();
        if (artiNombre != null) {
            stmt.bindString(12, artiNombre);
        }
 
        Long artiVlrMaxTomas = entity.getArtiVlrMaxTomas();
        if (artiVlrMaxTomas != null) {
            stmt.bindLong(13, artiVlrMaxTomas);
        }
 
        String tiprNombre = entity.getTiprNombre();
        if (tiprNombre != null) {
            stmt.bindString(14, tiprNombre);
        }
 
        String unmeNombrePpal = entity.getUnmeNombrePpal();
        if (unmeNombrePpal != null) {
            stmt.bindString(15, unmeNombrePpal);
        }
 
        Long artiVlrMinRondas = entity.getArtiVlrMinRondas();
        if (artiVlrMinRondas != null) {
            stmt.bindLong(16, artiVlrMinRondas);
        }
 
        Double promAntDiario = entity.getPromAntDiario();
        if (promAntDiario != null) {
            stmt.bindDouble(17, promAntDiario);
        }
 
        Long artiVlrMinTomas = entity.getArtiVlrMinTomas();
        if (artiVlrMinTomas != null) {
            stmt.bindLong(18, artiVlrMinTomas);
        }
 
        Long artiVlrMaxRondas = entity.getArtiVlrMaxRondas();
        if (artiVlrMaxRondas != null) {
            stmt.bindLong(19, artiVlrMaxRondas);
        }
 
        java.util.Date prreFechaProgramada = entity.getPrreFechaProgramada();
        if (prreFechaProgramada != null) {
            stmt.bindLong(20, prreFechaProgramada.getTime());
        }
 
        String muniId = entity.getMuniId();
        if (muniId != null) {
            stmt.bindString(21, muniId);
        }
 
        Double unmeCantidad2 = entity.getUnmeCantidad2();
        if (unmeCantidad2 != null) {
            stmt.bindDouble(22, unmeCantidad2);
        }
 
        String grupNombre = entity.getGrupNombre();
        if (grupNombre != null) {
            stmt.bindString(23, grupNombre);
        }
 
        Double unmeCantidadPpal = entity.getUnmeCantidadPpal();
        if (unmeCantidadPpal != null) {
           stmt.bindDouble(24, unmeCantidadPpal);
        }
 
        Long artiVlrMaxDiasm = entity.getArtiVlrMaxDiasm();
        if (artiVlrMaxDiasm != null) {
            stmt.bindLong(25, artiVlrMaxDiasm);
        }
 
        Double precio = entity.getPrecio();
        if (precio != null) {
            stmt.bindDouble(26, precio);
        }
 
        String novedad = entity.getNovedad();
        if (novedad != null) {
            stmt.bindString(27, novedad);
        }
 
        String tipo = entity.getTipo();
        if (tipo != null) {
            stmt.bindString(28, tipo);
        }
 
        java.util.Date fechaDescarga = entity.getFechaDescarga();
        if (fechaDescarga != null) {
            stmt.bindLong(29, fechaDescarga.getTime());
        }
 
        String observacion = entity.getObservacion();
        if (observacion != null) {
            stmt.bindString(30, observacion);
        }
 
        Long idObservacion = entity.getIdObservacion();
        if (idObservacion != null) {
            stmt.bindLong(31, idObservacion);
        }
 
        String desviacion = entity.getDesviacion();
        if (desviacion != null) {
            stmt.bindString(32, desviacion);
        }
 
        Boolean estadoRecoleccion = entity.getEstadoRecoleccion();
        if (estadoRecoleccion != null) {
            stmt.bindLong(33, estadoRecoleccion ? 1L: 0L);
        }
 
        Boolean transmitido = entity.getTransmitido();
        if (transmitido != null) {
            stmt.bindLong(34, transmitido ? 1L: 0L);
        }
 
        java.util.Date fechaRecoleccion = entity.getFechaRecoleccion();
        if (fechaRecoleccion != null) {
            stmt.bindLong(35, fechaRecoleccion.getTime());
        }
 
        Long unmeId = entity.getUnmeId();
        if (unmeId != null) {
            stmt.bindLong(36, unmeId);
        }
 
        Long tireId = entity.getTireId();
        if (tireId != null) {
            stmt.bindLong(37, tireId);
        }
 
        Long fuenId = entity.getFuenId();
        if (fuenId != null) {
            stmt.bindLong(38, fuenId);
        }
 
        Long artiId = entity.getArtiId();
        if (artiId != null) {
            stmt.bindLong(39, artiId);
        }
 
        Long cacoId = entity.getCacoId();
        if (cacoId != null) {
            stmt.bindLong(40, cacoId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Recoleccion readEntity(Cursor cursor, int offset) {
        Recoleccion entity = new Recoleccion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // artiVlrMinDiasm
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // futiId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // novedadAnterior
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // articacoId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // subgNombre
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // unmeNombre2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cacoNombre
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fuenNombre
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // articacoRegicaLinea
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // tiprId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // artiNombre
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // artiVlrMaxTomas
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // tiprNombre
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // unmeNombrePpal
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // artiVlrMinRondas
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // promAntDiario
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // artiVlrMinTomas
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // artiVlrMaxRondas
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // prreFechaProgramada
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // muniId
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // unmeCantidad2
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // grupNombre
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // unmeCantidadPpal
            cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24), // artiVlrMaxDiasm
            cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25), // precio
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // novedad
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // tipo
            cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)), // fechaDescarga
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // observacion
            cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30), // idObservacion
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // desviacion
            cursor.isNull(offset + 32) ? null : cursor.getShort(offset + 32) != 0, // estadoRecoleccion
            cursor.isNull(offset + 33) ? null : cursor.getShort(offset + 33) != 0, // transmitido
            cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)), // fechaRecoleccion
            cursor.isNull(offset + 35) ? null : cursor.getLong(offset + 35), // unmeId
            cursor.isNull(offset + 36) ? null : cursor.getLong(offset + 36), // tireId
            cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37), // fuenId
            cursor.isNull(offset + 38) ? null : cursor.getLong(offset + 38), // artiId
            cursor.isNull(offset + 39) ? null : cursor.getLong(offset + 39) // cacoId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Recoleccion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArtiVlrMinDiasm(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFutiId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setNovedadAnterior(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArticacoId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSubgNombre(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnmeNombre2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCacoNombre(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFuenNombre(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setArticacoRegicaLinea(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTiprId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setArtiNombre(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setArtiVlrMaxTomas(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setTiprNombre(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUnmeNombrePpal(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setArtiVlrMinRondas(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setPromAntDiario(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setArtiVlrMinTomas(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setArtiVlrMaxRondas(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setPrreFechaProgramada(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setMuniId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUnmeCantidad2(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setGrupNombre(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUnmeCantidadPpal(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setArtiVlrMaxDiasm(cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24));
        entity.setPrecio(cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25));
        entity.setNovedad(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setTipo(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setFechaDescarga(cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)));
        entity.setObservacion(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setIdObservacion(cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30));
        entity.setDesviacion(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setEstadoRecoleccion(cursor.isNull(offset + 32) ? null : cursor.getShort(offset + 32) != 0);
        entity.setTransmitido(cursor.isNull(offset + 33) ? null : cursor.getShort(offset + 33) != 0);
        entity.setFechaRecoleccion(cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)));
        entity.setUnmeId(cursor.isNull(offset + 35) ? null : cursor.getLong(offset + 35));
        entity.setTireId(cursor.isNull(offset + 36) ? null : cursor.getLong(offset + 36));
        entity.setFuenId(cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37));
        entity.setArtiId(cursor.isNull(offset + 38) ? null : cursor.getLong(offset + 38));
        entity.setCacoId(cursor.isNull(offset + 39) ? null : cursor.getLong(offset + 39));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Recoleccion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Recoleccion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "unmePrincipal" to-many relationship of UnidadMedida. */
    public List<Recoleccion> _queryUnidadMedida_UnmePrincipal(Long unmeId) {
        synchronized (this) {
            if (unidadMedida_UnmePrincipalQuery == null) {
                QueryBuilder<Recoleccion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UnmeId.eq(null));
                unidadMedida_UnmePrincipalQuery = queryBuilder.build();
            }
        }
        Query<Recoleccion> query = unidadMedida_UnmePrincipalQuery.forCurrentThread();
        query.setParameter(0, unmeId);
        return query.list();
    }

    /** Internal query to resolve the "tirePrincipal" to-many relationship of TipoRecoleccion. */
    public List<Recoleccion> _queryTipoRecoleccion_TirePrincipal(Long tireId) {
        synchronized (this) {
            if (tipoRecoleccion_TirePrincipalQuery == null) {
                QueryBuilder<Recoleccion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TireId.eq(null));
                tipoRecoleccion_TirePrincipalQuery = queryBuilder.build();
            }
        }
        Query<Recoleccion> query = tipoRecoleccion_TirePrincipalQuery.forCurrentThread();
        query.setParameter(0, tireId);
        return query.list();
    }

    /** Internal query to resolve the "fuenPrincipal" to-many relationship of Fuente. */
    public List<Recoleccion> _queryFuente_FuenPrincipal(Long fuenId) {
        synchronized (this) {
            if (fuente_FuenPrincipalQuery == null) {
                QueryBuilder<Recoleccion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FuenId.eq(null));
                fuente_FuenPrincipalQuery = queryBuilder.build();
            }
        }
        Query<Recoleccion> query = fuente_FuenPrincipalQuery.forCurrentThread();
        query.setParameter(0, fuenId);
        return query.list();
    }

    /** Internal query to resolve the "artiPrincipal" to-many relationship of Articulo. */
    public List<Recoleccion> _queryArticulo_ArtiPrincipal(Long artiId) {
        synchronized (this) {
            if (articulo_ArtiPrincipalQuery == null) {
                QueryBuilder<Recoleccion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ArtiId.eq(null));
                articulo_ArtiPrincipalQuery = queryBuilder.build();
            }
        }
        Query<Recoleccion> query = articulo_ArtiPrincipalQuery.forCurrentThread();
        query.setParameter(0, artiId);
        return query.list();
    }

    /** Internal query to resolve the "cacoPrincipal" to-many relationship of CasaComercial. */
    public List<Recoleccion> _queryCasaComercial_CacoPrincipal(Long cacoId) {
        synchronized (this) {
            if (casaComercial_CacoPrincipalQuery == null) {
                QueryBuilder<Recoleccion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CacoId.eq(null));
                casaComercial_CacoPrincipalQuery = queryBuilder.build();
            }
        }
        Query<Recoleccion> query = casaComercial_CacoPrincipalQuery.forCurrentThread();
        query.setParameter(0, cacoId);
        return query.list();
    }

}
