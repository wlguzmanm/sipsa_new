package co.gov.dane.sipsa.backend.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SUB_GRUPO".
*/
public class SubGrupoDao extends AbstractDao<SubGrupo, Long> {

    public static final String TABLENAME = "SUB_GRUPO";

    /**
     * Properties of entity SubGrupo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IdSubGrupo = new Property(0, Long.class, "idSubGrupo", true, "ID_SUB_GRUPO");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property FechaCreacion = new Property(2, java.util.Date.class, "fechaCreacion", false, "FECHA_CREACION");
        public final static Property UsuarioCreacion = new Property(3, String.class, "usuarioCreacion", false, "USUARIO_CREACION");
        public final static Property FechaModificacion = new Property(4, java.util.Date.class, "fechaModificacion", false, "FECHA_MODIFICACION");
        public final static Property UsuarioModificacion = new Property(5, String.class, "usuarioModificacion", false, "USUARIO_MODIFICACION");
        public final static Property IdGrupo = new Property(6, long.class, "idGrupo", false, "ID_GRUPO");
    };

    private DaoSession daoSession;


    public SubGrupoDao(DaoConfig config) {
        super(config);
    }
    
    public SubGrupoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUB_GRUPO\" (" + //
                "\"ID_SUB_GRUPO\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idSubGrupo
                "\"NOMBRE\" TEXT," + // 1: nombre
                "\"FECHA_CREACION\" INTEGER," + // 2: fechaCreacion
                "\"USUARIO_CREACION\" TEXT," + // 3: usuarioCreacion
                "\"FECHA_MODIFICACION\" INTEGER," + // 4: fechaModificacion
                "\"USUARIO_MODIFICACION\" TEXT," + // 5: usuarioModificacion
                "\"ID_GRUPO\" INTEGER NOT NULL );"); // 6: idGrupo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUB_GRUPO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SubGrupo entity) {
        stmt.clearBindings();
 
        Long idSubGrupo = entity.getIdSubGrupo();
        if (idSubGrupo != null) {
            stmt.bindLong(1, idSubGrupo);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        java.util.Date fechaCreacion = entity.getFechaCreacion();
        if (fechaCreacion != null) {
            stmt.bindLong(3, fechaCreacion.getTime());
        }
 
        String usuarioCreacion = entity.getUsuarioCreacion();
        if (usuarioCreacion != null) {
            stmt.bindString(4, usuarioCreacion);
        }
 
        java.util.Date fechaModificacion = entity.getFechaModificacion();
        if (fechaModificacion != null) {
            stmt.bindLong(5, fechaModificacion.getTime());
        }
 
        String usuarioModificacion = entity.getUsuarioModificacion();
        if (usuarioModificacion != null) {
            stmt.bindString(6, usuarioModificacion);
        }
        stmt.bindLong(7, entity.getIdGrupo());
    }

    @Override
    protected void attachEntity(SubGrupo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SubGrupo readEntity(Cursor cursor, int offset) {
        SubGrupo entity = new SubGrupo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idSubGrupo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombre
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // fechaCreacion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // usuarioCreacion
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // fechaModificacion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // usuarioModificacion
            cursor.getLong(offset + 6) // idGrupo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SubGrupo entity, int offset) {
        entity.setIdSubGrupo(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFechaCreacion(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setUsuarioCreacion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFechaModificacion(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUsuarioModificacion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIdGrupo(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SubGrupo entity, long rowId) {
        entity.setIdSubGrupo(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SubGrupo entity) {
        if(entity != null) {
            return entity.getIdSubGrupo();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGrupoDao().getAllColumns());
            builder.append(" FROM SUB_GRUPO T");
            builder.append(" LEFT JOIN GRUPO T0 ON T.\"ID_GRUPO\"=T0.\"GRUP_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected SubGrupo loadCurrentDeep(Cursor cursor, boolean lock) {
        SubGrupo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Grupo grupoSubGrupo = loadCurrentOther(daoSession.getGrupoDao(), cursor, offset);
         if(grupoSubGrupo != null) {
            entity.setGrupoSubGrupo(grupoSubGrupo);
        }

        return entity;    
    }

    public SubGrupo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<SubGrupo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<SubGrupo> list = new ArrayList<SubGrupo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<SubGrupo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<SubGrupo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
