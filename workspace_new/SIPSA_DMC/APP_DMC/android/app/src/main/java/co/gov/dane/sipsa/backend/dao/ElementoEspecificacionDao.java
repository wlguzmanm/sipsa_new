package co.gov.dane.sipsa.backend.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ELEMENTO_ESPECIFICACION".
 */
public class ElementoEspecificacionDao extends AbstractDao<ElementoEspecificacion, Long> {

    public static final String TABLENAME = "ELEMENTO_ESPECIFICACION";

    /**
     * Properties of entity ElementoEspecificacion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdElementoEspecificacion = new Property(0, Long.class, "idElementoEspecificacion", true, "ID_ELEMENTO_ESPECIFICACION");
        public final static Property IdTipoEspecificacion = new Property(1, Long.class, "idTipoEspecificacion", false, "ID_TIPO_ESPECIFICACION");
        public final static Property IdArgumento = new Property(2, Integer.class, "idArgumento", false, "ID_ARGUMENTO");
        public final static Property Orden = new Property(3, Integer.class, "orden", false, "ORDEN");
        public final static Property NombreElemento = new Property(4, String.class, "nombreElemento", false, "NOMBRE_ELEMENTO");
        public final static Property IdElemento = new Property(5, long.class, "idElemento", false, "ID_ELEMENTO");
    };

    private Query<ElementoEspecificacion> elemento_ElementoQuery;

    public ElementoEspecificacionDao(DaoConfig config) {
        super(config);
    }

    public ElementoEspecificacionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ELEMENTO_ESPECIFICACION\" (" + //
                "\"ID_ELEMENTO_ESPECIFICACION\" INTEGER PRIMARY KEY ," + // 0: idElementoEspecificacion
                "\"ID_TIPO_ESPECIFICACION\" INTEGER," + // 1: idTipoEspecificacion
                "\"ID_ARGUMENTO\" INTEGER," + // 2: idArgumento
                "\"ORDEN\" INTEGER," + // 3: orden
                "\"NOMBRE_ELEMENTO\" TEXT," + // 4: nombreElemento
                "\"ID_ELEMENTO\" INTEGER NOT NULL );"); // 5: idElemento
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ELEMENTO_ESPECIFICACION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ElementoEspecificacion entity) {
        stmt.clearBindings();

        Long idElementoEspecificacion = entity.getIdElementoEspecificacion();
        if (idElementoEspecificacion != null) {
            stmt.bindLong(1, idElementoEspecificacion);
        }

        Long idTipoEspecificacion = entity.getIdTipoEspecificacion();
        if (idTipoEspecificacion != null) {
            stmt.bindLong(2, idTipoEspecificacion);
        }

        Integer idArgumento = entity.getIdArgumento();
        if (idArgumento != null) {
            stmt.bindLong(3, idArgumento);
        }

        Integer orden = entity.getOrden();
        if (orden != null) {
            stmt.bindLong(4, orden);
        }

        String nombreElemento = entity.getNombreElemento();
        if (nombreElemento != null) {
            stmt.bindString(5, nombreElemento);
        }
        stmt.bindLong(6, entity.getIdElemento());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ElementoEspecificacion readEntity(Cursor cursor, int offset) {
        ElementoEspecificacion entity = new ElementoEspecificacion( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idElementoEspecificacion
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idTipoEspecificacion
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // idArgumento
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // orden
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nombreElemento
                cursor.getLong(offset + 5) // idElemento
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ElementoEspecificacion entity, int offset) {
        entity.setIdElementoEspecificacion(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdTipoEspecificacion(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIdArgumento(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setOrden(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setNombreElemento(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdElemento(cursor.getLong(offset + 5));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ElementoEspecificacion entity, long rowId) {
        entity.setIdElementoEspecificacion(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ElementoEspecificacion entity) {
        if(entity != null) {
            return entity.getIdElementoEspecificacion();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /** Internal query to resolve the "elemento" to-many relationship of Elemento. */
    public List<ElementoEspecificacion> _queryElemento_Elemento(long idElemento) {
        synchronized (this) {
            if (elemento_ElementoQuery == null) {
                QueryBuilder<ElementoEspecificacion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdElemento.eq(null));
                elemento_ElementoQuery = queryBuilder.build();
            }
        }
        Query<ElementoEspecificacion> query = elemento_ElementoQuery.forCurrentThread();
        query.setParameter(0, idElemento);
        return query.list();
    }

}
