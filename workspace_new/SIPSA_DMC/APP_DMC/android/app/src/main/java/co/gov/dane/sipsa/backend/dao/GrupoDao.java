package co.gov.dane.sipsa.backend.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GRUPO".
*/
public class  GrupoDao extends AbstractDao<Grupo, Long> {

    public static final String TABLENAME = "GRUPO";

    /**
     * Properties of entity Grupo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GrupId = new Property(0, Long.class, "grupId", true, "GRUP_ID");
        public final static Property GrupNombre = new Property(1, String.class, "grupNombre", false, "GRUP_NOMBRE");
        public final static Property TireId = new Property(2, Long.class, "tireId", false, "TIRE_ID");
    };

    private Query<Grupo> tipoRecoleccion_GrupoTipoRecoleccionQuery;

    public GrupoDao(DaoConfig config) {
        super(config);
    }
    
    public GrupoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GRUPO\" (" + //
                "\"GRUP_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: grupId
                "\"GRUP_NOMBRE\" TEXT," + // 1: grupNombre
                "\"TIRE_ID\" INTEGER);"); // 2: tireId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GRUPO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Grupo entity) {
        stmt.clearBindings();
 
        Long grupId = entity.getGrupId();
        if (grupId != null) {
            stmt.bindLong(1, grupId);
        }
 
        String grupNombre = entity.getGrupNombre();
        if (grupNombre != null) {
            stmt.bindString(2, grupNombre);
        }
 
        Long tireId = entity.getTireId();
        if (tireId != null) {
            stmt.bindLong(3, tireId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Grupo readEntity(Cursor cursor, int offset) {
        Grupo entity = new Grupo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // grupId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // grupNombre
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // tireId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Grupo entity, int offset) {
        entity.setGrupId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGrupNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTireId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Grupo entity, long rowId) {
        entity.setGrupId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Grupo entity) {
        if(entity != null) {
            return entity.getGrupId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "grupoTipoRecoleccion" to-many relationship of TipoRecoleccion. */
    public List<Grupo> _queryTipoRecoleccion_GrupoTipoRecoleccion(Long tireId) {
        synchronized (this) {
            if (tipoRecoleccion_GrupoTipoRecoleccionQuery == null) {
                QueryBuilder<Grupo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TireId.eq(null));
                tipoRecoleccion_GrupoTipoRecoleccionQuery = queryBuilder.build();
            }
        }
        Query<Grupo> query = tipoRecoleccion_GrupoTipoRecoleccionQuery.forCurrentThread();
        query.setParameter(0, tireId);
        return query.list();
    }

}
