package co.gov.dane.sipsa.backend.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "TIPO_RECOLECCION".
 */
public class TipoRecoleccion {

    private Long tireId;
    private String tireNombre;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TipoRecoleccionDao myDao;

    private List<FuenteArticulo> fuenArtiTipoRecoleccion;
    private List<Articulo> artiTipoRecoleccion;
    private List<UnidadMedida> unmeTipoRecoleccion;
    private List<Grupo> grupoTipoRecoleccion;
    private List<Recoleccion> tirePrincipal;

    public TipoRecoleccion() {
    }

    public TipoRecoleccion(Long tireId) {
        this.tireId = tireId;
    }

    public TipoRecoleccion(Long tireId, String tireNombre) {
        this.tireId = tireId;
        this.tireNombre = tireNombre;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTipoRecoleccionDao() : null;
    }

    public Long getTireId() {
        return tireId;
    }

    public void setTireId(Long tireId) {
        this.tireId = tireId;
    }

    public String getTireNombre() {
        return tireNombre;
    }

    public void setTireNombre(String tireNombre) {
        this.tireNombre = tireNombre;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FuenteArticulo> getFuenArtiTipoRecoleccion() {
        if (fuenArtiTipoRecoleccion == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FuenteArticuloDao targetDao = daoSession.getFuenteArticuloDao();
            List<FuenteArticulo> fuenArtiTipoRecoleccionNew = targetDao._queryTipoRecoleccion_FuenArtiTipoRecoleccion(tireId);
            synchronized (this) {
                if(fuenArtiTipoRecoleccion == null) {
                    fuenArtiTipoRecoleccion = fuenArtiTipoRecoleccionNew;
                }
            }
        }
        return fuenArtiTipoRecoleccion;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFuenArtiTipoRecoleccion() {
        fuenArtiTipoRecoleccion = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Articulo> getArtiTipoRecoleccion() {
        if (artiTipoRecoleccion == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArticuloDao targetDao = daoSession.getArticuloDao();
            List<Articulo> artiTipoRecoleccionNew = targetDao._queryTipoRecoleccion_ArtiTipoRecoleccion(tireId);
            synchronized (this) {
                if(artiTipoRecoleccion == null) {
                    artiTipoRecoleccion = artiTipoRecoleccionNew;
                }
            }
        }
        return artiTipoRecoleccion;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetArtiTipoRecoleccion() {
        artiTipoRecoleccion = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<UnidadMedida> getUnmeTipoRecoleccion() {
        if (unmeTipoRecoleccion == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UnidadMedidaDao targetDao = daoSession.getUnidadMedidaDao();
            List<UnidadMedida> unmeTipoRecoleccionNew = targetDao._queryTipoRecoleccion_UnmeTipoRecoleccion(tireId);
            synchronized (this) {
                if(unmeTipoRecoleccion == null) {
                    unmeTipoRecoleccion = unmeTipoRecoleccionNew;
                }
            }
        }
        return unmeTipoRecoleccion;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUnmeTipoRecoleccion() {
        unmeTipoRecoleccion = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Grupo> getGrupoTipoRecoleccion() {
        if (grupoTipoRecoleccion == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GrupoDao targetDao = daoSession.getGrupoDao();
            List<Grupo> grupoTipoRecoleccionNew = targetDao._queryTipoRecoleccion_GrupoTipoRecoleccion(tireId);
            synchronized (this) {
                if(grupoTipoRecoleccion == null) {
                    grupoTipoRecoleccion = grupoTipoRecoleccionNew;
                }
            }
        }
        return grupoTipoRecoleccion;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGrupoTipoRecoleccion() {
        grupoTipoRecoleccion = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Recoleccion> getTirePrincipal() {
        if (tirePrincipal == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RecoleccionDao targetDao = daoSession.getRecoleccionDao();
            List<Recoleccion> tirePrincipalNew = targetDao._queryTipoRecoleccion_TirePrincipal(tireId);
            synchronized (this) {
                if(tirePrincipal == null) {
                    tirePrincipal = tirePrincipalNew;
                }
            }
        }
        return tirePrincipal;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTirePrincipal() {
        tirePrincipal = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
