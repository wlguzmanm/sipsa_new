package co.gov.dane.sipsa.backend.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "RECOLECCION_INSUMO".
*/
public class RecoleccionInsumoDao extends AbstractDao<RecoleccionInsumo, Long> {

    public static final String TABLENAME = "RECOLECCION_INSUMO";

    /**
     * Properties of entity RecoleccionInsumo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UsuarioPerfil = new Property(1, Long.class, "usuarioPerfil", false, "USUARIO_PERFIL");
        public final static Property FechaProgramadaRecoleccion = new Property(2, java.util.Date.class, "fechaProgramadaRecoleccion", false, "FECHA_PROGRAMADA_RECOLECCION");
        public final static Property IdArticulo = new Property(3, Long.class, "idArticulo", false, "ID_ARTICULO");
        public final static Property UnidadRecoleccion = new Property(4, Long.class, "unidadRecoleccion", false, "UNIDAD_RECOLECCION");
        public final static Property PrecioAnterior = new Property(5, Double.class, "precioAnterior", false, "PRECIO_ANTERIOR");
        public final static Property NovedadAnterior = new Property(6, String.class, "novedadAnterior", false, "NOVEDAD_ANTERIOR");
        public final static Property PrecioRecolectado = new Property(7, Long.class, "precioRecolectado", false, "PRECIO_RECOLECTADO");
        public final static Property NovedadActual = new Property(8, String.class, "novedadActual", false, "NOVEDAD_ACTUAL");
        public final static Property Observacion = new Property(9, String.class, "observacion", false, "OBSERVACION");
        public final static Property IdEstado = new Property(10, Long.class, "idEstado", false, "ID_ESTADO");
        public final static Property FechaRecoleccion = new Property(11, java.util.Date.class, "fechaRecoleccion", false, "FECHA_RECOLECCION");
        public final static Property FechaCreacion = new Property(12, java.util.Date.class, "fechaCreacion", false, "FECHA_CREACION");
        public final static Property UsuarioCreacion = new Property(13, String.class, "usuarioCreacion", false, "USUARIO_CREACION");
        public final static Property FechaModificacion = new Property(14, java.util.Date.class, "fechaModificacion", false, "FECHA_MODIFICACION");
        public final static Property UsuarioModificacion = new Property(15, String.class, "usuarioModificacion", false, "USUARIO_MODIFICACION");
        public final static Property RecoIdObservacion = new Property(16, long.class, "recoIdObservacion", false, "RECO_ID_OBSERVACION");
    };

    private DaoSession daoSession;


    public RecoleccionInsumoDao(DaoConfig config) {
        super(config);
    }
    
    public RecoleccionInsumoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECOLECCION_INSUMO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USUARIO_PERFIL\" INTEGER," + // 1: usuarioPerfil
                "\"FECHA_PROGRAMADA_RECOLECCION\" INTEGER," + // 2: fechaProgramadaRecoleccion
                "\"ID_ARTICULO\" INTEGER," + // 3: idArticulo
                "\"UNIDAD_RECOLECCION\" INTEGER," + // 4: unidadRecoleccion
                "\"PRECIO_ANTERIOR\" REAL," + // 5: precioAnterior
                "\"NOVEDAD_ANTERIOR\" TEXT," + // 6: novedadAnterior
                "\"PRECIO_RECOLECTADO\" INTEGER," + // 7: precioRecolectado
                "\"NOVEDAD_ACTUAL\" TEXT," + // 8: novedadActual
                "\"OBSERVACION\" TEXT," + // 9: observacion
                "\"ID_ESTADO\" INTEGER," + // 10: idEstado
                "\"FECHA_RECOLECCION\" INTEGER," + // 11: fechaRecoleccion
                "\"FECHA_CREACION\" INTEGER," + // 12: fechaCreacion
                "\"USUARIO_CREACION\" TEXT," + // 13: usuarioCreacion
                "\"FECHA_MODIFICACION\" INTEGER," + // 14: fechaModificacion
                "\"USUARIO_MODIFICACION\" TEXT," + // 15: usuarioModificacion
                "\"RECO_ID_OBSERVACION\" INTEGER NOT NULL );"); // 16: recoIdObservacion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECOLECCION_INSUMO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecoleccionInsumo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long usuarioPerfil = entity.getUsuarioPerfil();
        if (usuarioPerfil != null) {
            stmt.bindLong(2, usuarioPerfil);
        }
 
        java.util.Date fechaProgramadaRecoleccion = entity.getFechaProgramadaRecoleccion();
        if (fechaProgramadaRecoleccion != null) {
            stmt.bindLong(3, fechaProgramadaRecoleccion.getTime());
        }
 
        Long idArticulo = entity.getIdArticulo();
        if (idArticulo != null) {
            stmt.bindLong(4, idArticulo);
        }
 
        Long unidadRecoleccion = entity.getUnidadRecoleccion();
        if (unidadRecoleccion != null) {
            stmt.bindLong(5, unidadRecoleccion);
        }
 
        Double precioAnterior = entity.getPrecioAnterior();
        if (precioAnterior != null) {
            stmt.bindDouble(6, precioAnterior);
        }
 
        String novedadAnterior = entity.getNovedadAnterior();
        if (novedadAnterior != null) {
            stmt.bindString(7, novedadAnterior);
        }
 
        Long precioRecolectado = entity.getPrecioRecolectado();
        if (precioRecolectado != null) {
            stmt.bindLong(8, precioRecolectado);
        }
 
        String novedadActual = entity.getNovedadActual();
        if (novedadActual != null) {
            stmt.bindString(9, novedadActual);
        }
 
        String observacion = entity.getObservacion();
        if (observacion != null) {
            stmt.bindString(10, observacion);
        }
 
        Long idEstado = entity.getIdEstado();
        if (idEstado != null) {
            stmt.bindLong(11, idEstado);
        }
 
        java.util.Date fechaRecoleccion = entity.getFechaRecoleccion();
        if (fechaRecoleccion != null) {
            stmt.bindLong(12, fechaRecoleccion.getTime());
        }
 
        java.util.Date fechaCreacion = entity.getFechaCreacion();
        if (fechaCreacion != null) {
            stmt.bindLong(13, fechaCreacion.getTime());
        }
 
        String usuarioCreacion = entity.getUsuarioCreacion();
        if (usuarioCreacion != null) {
            stmt.bindString(14, usuarioCreacion);
        }
 
        java.util.Date fechaModificacion = entity.getFechaModificacion();
        if (fechaModificacion != null) {
            stmt.bindLong(15, fechaModificacion.getTime());
        }
 
        String usuarioModificacion = entity.getUsuarioModificacion();
        if (usuarioModificacion != null) {
            stmt.bindString(16, usuarioModificacion);
        }
        stmt.bindLong(17, entity.getRecoIdObservacion());
    }

    @Override
    protected void attachEntity(RecoleccionInsumo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RecoleccionInsumo readEntity(Cursor cursor, int offset) {
        RecoleccionInsumo entity = new RecoleccionInsumo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // usuarioPerfil
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // fechaProgramadaRecoleccion
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // idArticulo
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // unidadRecoleccion
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // precioAnterior
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // novedadAnterior
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // precioRecolectado
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // novedadActual
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // observacion
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // idEstado
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // fechaRecoleccion
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // fechaCreacion
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // usuarioCreacion
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // fechaModificacion
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // usuarioModificacion
            cursor.getLong(offset + 16) // recoIdObservacion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecoleccionInsumo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsuarioPerfil(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFechaProgramadaRecoleccion(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setIdArticulo(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setUnidadRecoleccion(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPrecioAnterior(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setNovedadAnterior(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrecioRecolectado(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setNovedadActual(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setObservacion(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIdEstado(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setFechaRecoleccion(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setFechaCreacion(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setUsuarioCreacion(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFechaModificacion(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setUsuarioModificacion(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRecoIdObservacion(cursor.getLong(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RecoleccionInsumo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RecoleccionInsumo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getObservacionDao().getAllColumns());
            builder.append(" FROM RECOLECCION_INSUMO T");
            builder.append(" LEFT JOIN OBSERVACION T0 ON T.\"RECO_ID_OBSERVACION\"=T0.\"OBSE_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RecoleccionInsumo loadCurrentDeep(Cursor cursor, boolean lock) {
        RecoleccionInsumo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Observacion RecoObservacion = loadCurrentOther(daoSession.getObservacionDao(), cursor, offset);
         if(RecoObservacion != null) {
            entity.setRecoObservacion(RecoObservacion);
        }

        return entity;    
    }

    public RecoleccionInsumo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RecoleccionInsumo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RecoleccionInsumo> list = new ArrayList<RecoleccionInsumo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RecoleccionInsumo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RecoleccionInsumo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
