package co.gov.dane.sipsa.backend.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ARTICULO_I01".
*/
public class ArticuloI01Dao extends AbstractDao<ArticuloI01, Long> {

    public static final String TABLENAME = "ARTICULO_I01";

    /**
     * Properties of entity ArticuloI01.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Grin2Id = new Property(1, Long.class, "grin2Id", false, "GRIN2_ID");
        public final static Property ArtiId = new Property(2, Long.class, "artiId", false, "ARTI_ID");
        public final static Property ArtiNombre = new Property(3, String.class, "artiNombre", false, "ARTI_NOMBRE");
        public final static Property NombreCompleto = new Property(4, String.class, "nombreCompleto", false, "NOMBRE_COMPLETO");
        public final static Property TireId = new Property(5, Long.class, "tireId", false, "TIRE_ID");
    };


    public ArticuloI01Dao(DaoConfig config) {
        super(config);
    }
    
    public ArticuloI01Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICULO_I01\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GRIN2_ID\" INTEGER," + // 1: grin2Id
                "\"ARTI_ID\" INTEGER," + // 2: artiId
                "\"ARTI_NOMBRE\" TEXT," + // 3: artiNombre
                "\"NOMBRE_COMPLETO\" TEXT," + // 4: nombreCompleto
                "\"TIRE_ID\" INTEGER);"); // 5: tireId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICULO_I01\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ArticuloI01 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long grin2Id = entity.getGrin2Id();
        if (grin2Id != null) {
            stmt.bindLong(2, grin2Id);
        }
 
        Long artiId = entity.getArtiId();
        if (artiId != null) {
            stmt.bindLong(3, artiId);
        }
 
        String artiNombre = entity.getArtiNombre();
        if (artiNombre != null) {
            stmt.bindString(4, artiNombre);
        }
 
        String nombreCompleto = entity.getNombreCompleto();
        if (nombreCompleto != null) {
            stmt.bindString(5, nombreCompleto);
        }
 
        Long tireId = entity.getTireId();
        if (tireId != null) {
            stmt.bindLong(6, tireId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ArticuloI01 readEntity(Cursor cursor, int offset) {
        ArticuloI01 entity = new ArticuloI01( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // grin2Id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // artiId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // artiNombre
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nombreCompleto
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // tireId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ArticuloI01 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGrin2Id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setArtiId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setArtiNombre(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNombreCompleto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTireId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ArticuloI01 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ArticuloI01 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
