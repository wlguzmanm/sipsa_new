package co.gov.dane.sipsa.backend.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FUENTE_TIRE_I01".
*/
public class FuenteTireI01Dao extends AbstractDao<FuenteTireI01, Long> {

    public static final String TABLENAME = "FUENTE_TIRE_I01";

    /**
     * Properties of entity FuenteTireI01.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FutiId = new Property(1, Long.class, "futiId", false, "FUTI_ID");
        public final static Property FuenId = new Property(2, Long.class, "fuenId", false, "FUEN_ID");
        public final static Property TireId = new Property(3, Long.class, "tireId", false, "TIRE_ID");
        public final static Property TireNombre = new Property(4, String.class, "tireNombre", false, "TIRE_NOMBRE");
        public final static Property MuniId = new Property(5, String.class, "muniId", false, "MUNI_ID");
        public final static Property MuniNombre = new Property(6, String.class, "muniNombre", false, "MUNI_NOMBRE");
        public final static Property PrreFechaProgramada = new Property(7, java.util.Date.class, "prreFechaProgramada", false, "PRRE_FECHA_PROGRAMADA");
    };


    public FuenteTireI01Dao(DaoConfig config) {
        super(config);
    }
    
    public FuenteTireI01Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FUENTE_TIRE_I01\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FUTI_ID\" INTEGER," + // 1: futiId
                "\"FUEN_ID\" INTEGER," + // 2: fuenId
                "\"TIRE_ID\" INTEGER," + // 3: tireId
                "\"TIRE_NOMBRE\" TEXT," + // 4: tireNombre
                "\"MUNI_ID\" TEXT," + // 5: muniId
                "\"MUNI_NOMBRE\" TEXT," + // 6: muniNombre
                "\"PRRE_FECHA_PROGRAMADA\" INTEGER);"); // 7: prreFechaProgramada
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FUENTE_TIRE_I01\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FuenteTireI01 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long futiId = entity.getFutiId();
        if (futiId != null) {
            stmt.bindLong(2, futiId);
        }
 
        Long fuenId = entity.getFuenId();
        if (fuenId != null) {
            stmt.bindLong(3, fuenId);
        }
 
        Long tireId = entity.getTireId();
        if (tireId != null) {
            stmt.bindLong(4, tireId);
        }
 
        String tireNombre = entity.getTireNombre();
        if (tireNombre != null) {
            stmt.bindString(5, tireNombre);
        }
 
        String muniId = entity.getMuniId();
        if (muniId != null) {
            stmt.bindString(6, muniId);
        }
 
        String muniNombre = entity.getMuniNombre();
        if (muniNombre != null) {
            stmt.bindString(7, muniNombre);
        }
 
        java.util.Date prreFechaProgramada = entity.getPrreFechaProgramada();
        if (prreFechaProgramada != null) {
            stmt.bindLong(8, prreFechaProgramada.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FuenteTireI01 readEntity(Cursor cursor, int offset) {
        FuenteTireI01 entity = new FuenteTireI01( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // futiId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // fuenId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // tireId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tireNombre
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // muniId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // muniNombre
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // prreFechaProgramada
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FuenteTireI01 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFutiId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFuenId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTireId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTireNombre(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMuniId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMuniNombre(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrreFechaProgramada(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FuenteTireI01 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FuenteTireI01 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
