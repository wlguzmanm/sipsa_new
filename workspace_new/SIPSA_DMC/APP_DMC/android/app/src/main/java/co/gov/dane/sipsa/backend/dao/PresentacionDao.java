package co.gov.dane.sipsa.backend.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PRESENTACION".
*/
public class PresentacionDao extends AbstractDao<Presentacion, Long> {

    public static final String TABLENAME = "PRESENTACION";

    /**
     * Properties of entity Presentacion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Idpresentacion = new Property(0, Long.class, "idpresentacion", true, "IDPRESENTACION");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property FechaCreacion = new Property(2, java.util.Date.class, "fechaCreacion", false, "FECHA_CREACION");
        public final static Property UsuarioCreacion = new Property(3, String.class, "usuarioCreacion", false, "USUARIO_CREACION");
        public final static Property FechaModificacion = new Property(4, java.util.Date.class, "fechaModificacion", false, "FECHA_MODIFICACION");
        public final static Property UsuarioModificacion = new Property(5, String.class, "usuarioModificacion", false, "USUARIO_MODIFICACION");
    };


    public PresentacionDao(DaoConfig config) {
        super(config);
    }
    
    public PresentacionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRESENTACION\" (" + //
                "\"IDPRESENTACION\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idpresentacion
                "\"NOMBRE\" TEXT," + // 1: nombre
                "\"FECHA_CREACION\" INTEGER," + // 2: fechaCreacion
                "\"USUARIO_CREACION\" TEXT," + // 3: usuarioCreacion
                "\"FECHA_MODIFICACION\" INTEGER," + // 4: fechaModificacion
                "\"USUARIO_MODIFICACION\" TEXT);"); // 5: usuarioModificacion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRESENTACION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Presentacion entity) {
        stmt.clearBindings();
 
        Long idpresentacion = entity.getIdpresentacion();
        if (idpresentacion != null) {
            stmt.bindLong(1, idpresentacion);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        java.util.Date fechaCreacion = entity.getFechaCreacion();
        if (fechaCreacion != null) {
            stmt.bindLong(3, fechaCreacion.getTime());
        }
 
        String usuarioCreacion = entity.getUsuarioCreacion();
        if (usuarioCreacion != null) {
            stmt.bindString(4, usuarioCreacion);
        }
 
        java.util.Date fechaModificacion = entity.getFechaModificacion();
        if (fechaModificacion != null) {
            stmt.bindLong(5, fechaModificacion.getTime());
        }
 
        String usuarioModificacion = entity.getUsuarioModificacion();
        if (usuarioModificacion != null) {
            stmt.bindString(6, usuarioModificacion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Presentacion readEntity(Cursor cursor, int offset) {
        Presentacion entity = new Presentacion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idpresentacion
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombre
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // fechaCreacion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // usuarioCreacion
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // fechaModificacion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // usuarioModificacion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Presentacion entity, int offset) {
        entity.setIdpresentacion(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFechaCreacion(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setUsuarioCreacion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFechaModificacion(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUsuarioModificacion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Presentacion entity, long rowId) {
        entity.setIdpresentacion(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Presentacion entity) {
        if(entity != null) {
            return entity.getIdpresentacion();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
