package co.gov.dane.sipsa.backend.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PRINCIPAL_I01".
*/
public class PrincipalI01Dao extends AbstractDao<PrincipalI01, Long> {

    public static final String TABLENAME = "PRINCIPAL_I01";

    /**
     * Properties of entity PrincipalI01.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TireId = new Property(1, Long.class, "tireId", false, "TIRE_ID");
        public final static Property FutiId = new Property(2, Long.class, "futiId", false, "FUTI_ID");
        public final static Property MuniId = new Property(3, String.class, "muniId", false, "MUNI_ID");
        public final static Property FuenId = new Property(4, Long.class, "fuenId", false, "FUEN_ID");
        public final static Property FuenNombre = new Property(5, String.class, "fuenNombre", false, "FUEN_NOMBRE");
        public final static Property ArtiId = new Property(6, Long.class, "artiId", false, "ARTI_ID");
        public final static Property ArtiNombre = new Property(7, String.class, "artiNombre", false, "ARTI_NOMBRE");
        public final static Property Grin2Id = new Property(8, Long.class, "grin2Id", false, "GRIN2_ID");
        public final static Property NombreComplemento = new Property(9, String.class, "nombreComplemento", false, "NOMBRE_COMPLEMENTO");
        public final static Property ArtiVlrMinTomas = new Property(10, Long.class, "artiVlrMinTomas", false, "ARTI_VLR_MIN_TOMAS");
        public final static Property ArtiVlrMaxTomas = new Property(11, Long.class, "artiVlrMaxTomas", false, "ARTI_VLR_MAX_TOMAS");
        public final static Property ArtiVlrMinRondas = new Property(12, Long.class, "artiVlrMinRondas", false, "ARTI_VLR_MIN_RONDAS");
        public final static Property ArtiVlrMaxRondas = new Property(13, Long.class, "artiVlrMaxRondas", false, "ARTI_VLR_MAX_RONDAS");
        public final static Property ArtiVlrMinDiasm = new Property(14, Long.class, "artiVlrMinDiasm", false, "ARTI_VLR_MIN_DIASM");
        public final static Property ArtiVlrMaxDiasm = new Property(15, Long.class, "artiVlrMaxDiasm", false, "ARTI_VLR_MAX_DIASM");
        public final static Property PrreFechaProgramada = new Property(16, java.util.Date.class, "prreFechaProgramada", false, "PRRE_FECHA_PROGRAMADA");
        public final static Property PromAnterior = new Property(17, Double.class, "promAnterior", false, "PROM_ANTERIOR");
        public final static Property FuentesCapturadas = new Property(18, Integer.class, "fuentesCapturadas", false, "FUENTES_CAPTURADAS");
        public final static Property Estado_trasmitido = new Property(19, Integer.class, "estado_trasmitido", false, "ESTADO_TRASMITIDO");
    };


    public PrincipalI01Dao(DaoConfig config) {
        super(config);
    }
    
    public PrincipalI01Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRINCIPAL_I01\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIRE_ID\" INTEGER," + // 1: tireId
                "\"FUTI_ID\" INTEGER," + // 2: futiId
                "\"MUNI_ID\" TEXT," + // 3: muniId
                "\"FUEN_ID\" INTEGER," + // 4: fuenId
                "\"FUEN_NOMBRE\" TEXT," + // 5: fuenNombre
                "\"ARTI_ID\" INTEGER," + // 6: artiId
                "\"ARTI_NOMBRE\" TEXT," + // 7: artiNombre
                "\"GRIN2_ID\" INTEGER," + // 8: grin2Id
                "\"NOMBRE_COMPLEMENTO\" TEXT," + // 9: nombreComplemento
                "\"ARTI_VLR_MIN_TOMAS\" INTEGER," + // 10: artiVlrMinTomas
                "\"ARTI_VLR_MAX_TOMAS\" INTEGER," + // 11: artiVlrMaxTomas
                "\"ARTI_VLR_MIN_RONDAS\" INTEGER," + // 12: artiVlrMinRondas
                "\"ARTI_VLR_MAX_RONDAS\" INTEGER," + // 13: artiVlrMaxRondas
                "\"ARTI_VLR_MIN_DIASM\" INTEGER," + // 14: artiVlrMinDiasm
                "\"ARTI_VLR_MAX_DIASM\" INTEGER," + // 15: artiVlrMaxDiasm
                "\"PRRE_FECHA_PROGRAMADA\" INTEGER," + // 16: prreFechaProgramada
                "\"PROM_ANTERIOR\" REAL," + // 17: promAnterior
                "\"FUENTES_CAPTURADAS\" INTEGER," + // 18: fuentesCapturadas
                "\"ESTADO_TRASMITIDO\" INTEGER);"); // 19: estado_trasmitido
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRINCIPAL_I01\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PrincipalI01 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tireId = entity.getTireId();
        if (tireId != null) {
            stmt.bindLong(2, tireId);
        }
 
        Long futiId = entity.getFutiId();
        if (futiId != null) {
            stmt.bindLong(3, futiId);
        }
 
        String muniId = entity.getMuniId();
        if (muniId != null) {
            stmt.bindString(4, muniId);
        }
 
        Long fuenId = entity.getFuenId();
        if (fuenId != null) {
            stmt.bindLong(5, fuenId);
        }
 
        String fuenNombre = entity.getFuenNombre();
        if (fuenNombre != null) {
            stmt.bindString(6, fuenNombre);
        }
 
        Long artiId = entity.getArtiId();
        if (artiId != null) {
            stmt.bindLong(7, artiId);
        }
 
        String artiNombre = entity.getArtiNombre();
        if (artiNombre != null) {
            stmt.bindString(8, artiNombre);
        }
 
        Long grin2Id = entity.getGrin2Id();
        if (grin2Id != null) {
            stmt.bindLong(9, grin2Id);
        }
 
        String nombreComplemento = entity.getNombreComplemento();
        if (nombreComplemento != null) {
            stmt.bindString(10, nombreComplemento);
        }
 
        Long artiVlrMinTomas = entity.getArtiVlrMinTomas();
        if (artiVlrMinTomas != null) {
            stmt.bindLong(11, artiVlrMinTomas);
        }
 
        Long artiVlrMaxTomas = entity.getArtiVlrMaxTomas();
        if (artiVlrMaxTomas != null) {
            stmt.bindLong(12, artiVlrMaxTomas);
        }
 
        Long artiVlrMinRondas = entity.getArtiVlrMinRondas();
        if (artiVlrMinRondas != null) {
            stmt.bindLong(13, artiVlrMinRondas);
        }
 
        Long artiVlrMaxRondas = entity.getArtiVlrMaxRondas();
        if (artiVlrMaxRondas != null) {
            stmt.bindLong(14, artiVlrMaxRondas);
        }
 
        Long artiVlrMinDiasm = entity.getArtiVlrMinDiasm();
        if (artiVlrMinDiasm != null) {
            stmt.bindLong(15, artiVlrMinDiasm);
        }
 
        Long artiVlrMaxDiasm = entity.getArtiVlrMaxDiasm();
        if (artiVlrMaxDiasm != null) {
            stmt.bindLong(16, artiVlrMaxDiasm);
        }
 
        java.util.Date prreFechaProgramada = entity.getPrreFechaProgramada();
        if (prreFechaProgramada != null) {
            stmt.bindLong(17, prreFechaProgramada.getTime());
        }
 
        Double promAnterior = entity.getPromAnterior();
        if (promAnterior != null) {
            stmt.bindDouble(18, promAnterior);
        }
 
        Integer fuentesCapturadas = entity.getFuentesCapturadas();
        if (fuentesCapturadas != null) {
            stmt.bindLong(19, fuentesCapturadas);
        }
 
        Integer estado_trasmitido = entity.getEstado_trasmitido();
        if (estado_trasmitido != null) {
            stmt.bindLong(20, estado_trasmitido);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PrincipalI01 readEntity(Cursor cursor, int offset) {
        PrincipalI01 entity = new PrincipalI01( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // tireId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // futiId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // muniId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // fuenId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fuenNombre
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // artiId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // artiNombre
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // grin2Id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nombreComplemento
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // artiVlrMinTomas
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // artiVlrMaxTomas
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // artiVlrMinRondas
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // artiVlrMaxRondas
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // artiVlrMinDiasm
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // artiVlrMaxDiasm
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // prreFechaProgramada
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // promAnterior
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // fuentesCapturadas
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19) // estado_trasmitido
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PrincipalI01 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTireId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFutiId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMuniId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFuenId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setFuenNombre(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setArtiId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setArtiNombre(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGrin2Id(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setNombreComplemento(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setArtiVlrMinTomas(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setArtiVlrMaxTomas(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setArtiVlrMinRondas(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setArtiVlrMaxRondas(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setArtiVlrMinDiasm(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setArtiVlrMaxDiasm(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setPrreFechaProgramada(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setPromAnterior(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setFuentesCapturadas(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setEstado_trasmitido(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PrincipalI01 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PrincipalI01 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
